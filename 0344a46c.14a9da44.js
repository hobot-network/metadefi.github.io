(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{102:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return d})),a.d(t,"metadata",(function(){return p})),a.d(t,"rightToc",(function(){return h})),a.d(t,"default",(function(){return j}));var n=a(1),l=a(6),r=(a(0),a(242)),s=a(247),i=a(248),c=a(244),o=a(245),m=a(246),u=a(254),b=a.n(u),d={delivery_guarantee:"at_least_once",description:"The Vector `aws_cloudwatch_logs` sink batches `log` events to Amazon Web Service's CloudWatch Logs service via the `PutLogEvents` API endpoint.",event_types:["log"],issues_url:"https://github.com/timberio/vector/issues?q=is%3Aopen+is%3Aissue+label%3A%22sink%3A+aws_cloudwatch_logs%22",operating_systems:["linux","macos","windows"],sidebar_label:'aws_cloudwatch_logs|["log"]',source_url:"https://github.com/timberio/vector/blob/master/src/sinks/aws_cloudwatch_logs/mod.rs",status:"beta",title:"AWS Cloudwatch Logs Sink",unsupported_operating_systems:[]},p={id:"reference/sinks/aws_cloudwatch_logs",title:"AWS Cloudwatch Logs Sink",description:"The Vector `aws_cloudwatch_logs` sink batches `log` events to Amazon Web Service's CloudWatch Logs service via the `PutLogEvents` API endpoint.",source:"@site/docs/reference/sinks/aws_cloudwatch_logs.md",permalink:"/docs/reference/sinks/aws_cloudwatch_logs",editUrl:"https://github.com/brainrexapi/edit/master/docs/reference/sinks/aws_cloudwatch_logs.md",sidebar_label:'aws_cloudwatch_logs|["log"]',sidebar:"docs",previous:{title:"Sinks",permalink:"/docs/reference/sinks"},next:{title:"AWS Cloudwatch Metrics Sink",permalink:"/docs/reference/sinks/aws_cloudwatch_metrics"}},h=[{value:"Configuration",id:"configuration",children:[]},{value:"Options",id:"options",children:[{value:"batch",id:"batch",children:[]},{value:"buffer",id:"buffer",children:[]},{value:"create_missing_group",id:"create_missing_group",children:[]},{value:"create_missing_stream",id:"create_missing_stream",children:[]},{value:"encoding",id:"encoding",children:[]},{value:"group_name",id:"group_name",children:[]},{value:"healthcheck",id:"healthcheck",children:[]},{value:"region",id:"region",children:[]},{value:"request",id:"request",children:[]},{value:"stream_name",id:"stream_name",children:[]}]},{value:"Output",id:"output",children:[]},{value:"How It Works",id:"how-it-works",children:[{value:"Buffers & Batches",id:"buffers--batches",children:[]},{value:"Environment Variables",id:"environment-variables",children:[]},{value:"Health Checks",id:"health-checks",children:[]},{value:"Partitioning",id:"partitioning",children:[]},{value:"Rate Limits",id:"rate-limits",children:[]},{value:"Retry Policy",id:"retry-policy",children:[]},{value:"Template Syntax",id:"template-syntax",children:[]}]}],f={rightToc:h},O="wrapper";function j(e){var t=e.components,a=Object(l.a)(e,["components"]);return Object(r.b)(O,Object(n.a)({},f,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"The Vector ",Object(r.b)("inlineCode",{parentName:"p"},"aws_cloudwatch_logs")," sink ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#buffers--batches"}),"batches")," ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/about/data-model/log/"}),Object(r.b)("inlineCode",{parentName:"a"},"log"))," events to ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/WhatIsCloudWatchLogs.html"}),"Amazon Web Service's CloudWatch Logs service")," via the ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutLogEvents.html"}),Object(r.b)("inlineCode",{parentName:"a"},"PutLogEvents")," API endpoint"),"."),Object(r.b)("h2",{id:"configuration"},"Configuration"),Object(r.b)(s.a,{block:!0,defaultValue:"common",values:[{label:"Common",value:"common"},{label:"Advanced",value:"advanced"}],mdxType:"Tabs"},Object(r.b)(i.a,{value:"common",mdxType:"TabItem"},Object(r.b)(c.a,{fileName:"vector.toml",learnMoreUrl:"/docs/setup/configuration/",mdxType:"CodeHeader"}),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-toml"}),'[sinks.my_sink_id]\n  # REQUIRED\n  type = "aws_cloudwatch_logs" # must be: "aws_cloudwatch_logs"\n  inputs = ["my-source-id"] # example\n  group_name = "{{ file }}" # example\n  region = "us-east-1" # example\n  stream_name = "{{ instance_id }}" # example\n\n  # OPTIONAL\n  create_missing_group = true # default\n  create_missing_stream = true # default\n'))),Object(r.b)(i.a,{value:"advanced",mdxType:"TabItem"},Object(r.b)(c.a,{fileName:"vector.toml",learnMoreUrl:"/docs/setup/configuration/",mdxType:"CodeHeader"}),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-toml"}),'[sinks.my_sink_id]\n  # REQUIRED - General\n  type = "aws_cloudwatch_logs" # must be: "aws_cloudwatch_logs"\n  inputs = ["my-source-id"] # example\n  group_name = "{{ file }}" # example\n  region = "us-east-1" # example\n  stream_name = "{{ instance_id }}" # example\n\n  # OPTIONAL - General\n  create_missing_group = true # default\n  create_missing_stream = true # default\n  healthcheck = true # default\n\n  # OPTIONAL - requests\n  encoding = "json" # example, no default, enum\n\n  # OPTIONAL - Batch\n  [sinks.my_sink_id.batch]\n    max_events = 1049000 # default, bytes\n    timeout_secs = 1 # default, seconds\n\n  # OPTIONAL - Buffer\n  [sinks.my_sink_id.buffer]\n    type = "memory" # default, enum\n    max_events = 500 # default, events, relevant when type = "memory"\n    max_size = 104900000 # example, no default, bytes, relevant when type = "disk"\n    when_full = "block" # default, enum\n\n  # OPTIONAL - Request\n  [sinks.my_sink_id.request]\n    in_flight_limit = 5 # default\n    rate_limit_duration_secs = 1 # default, seconds\n    rate_limit_num = 5 # default\n    retry_attempts = 5 # default\n    retry_initial_backoff_secs = 1 # default, seconds\n    retry_max_duration_secs = 10 # default, seconds\n    timeout_secs = 30 # default, seconds\n')))),Object(r.b)("h2",{id:"options"},"Options"),Object(r.b)(o.a,{filters:!0,mdxType:"Fields"},Object(r.b)(m.a,{common:!1,defaultValue:null,enumValues:null,examples:[],name:"batch",path:null,relevantWhen:null,required:!1,templateable:!1,type:"table",unit:null,mdxType:"Field"},Object(r.b)("h3",{id:"batch"},"batch"),Object(r.b)("p",null,"Configures the sink batching behavior."),Object(r.b)(o.a,{filters:!1,mdxType:"Fields"},Object(r.b)(m.a,{common:!1,defaultValue:1049e3,enumValues:null,examples:[1049e3],name:"max_events",path:"batch",relevantWhen:null,required:!1,templateable:!1,type:"int",unit:"bytes",mdxType:"Field"},Object(r.b)("h4",{id:"max_events"},"max_events"),Object(r.b)("p",null,"The maximum size of a batch before it is flushed. See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#buffers--batches"}),"Buffers & Batches")," for more info.")),Object(r.b)(m.a,{common:!1,defaultValue:1,enumValues:null,examples:[1],name:"timeout_secs",path:"batch",relevantWhen:null,required:!1,templateable:!1,type:"int",unit:"seconds",mdxType:"Field"},Object(r.b)("h4",{id:"timeout_secs"},"timeout_secs"),Object(r.b)("p",null,"The maximum age of a batch before it is flushed. See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#buffers--batches"}),"Buffers & Batches")," for more info.")))),Object(r.b)(m.a,{common:!1,defaultValue:null,enumValues:null,examples:[],name:"buffer",path:null,relevantWhen:null,required:!1,templateable:!1,type:"table",unit:null,mdxType:"Field"},Object(r.b)("h3",{id:"buffer"},"buffer"),Object(r.b)("p",null,"Configures the sink buffer behavior."),Object(r.b)(o.a,{filters:!1,mdxType:"Fields"},Object(r.b)(m.a,{common:!1,defaultValue:500,enumValues:null,examples:[500],name:"max_events",path:"buffer",relevantWhen:{type:"memory"},required:!1,templateable:!1,type:"int",unit:"events",mdxType:"Field"},Object(r.b)("h4",{id:"max_events-1"},"max_events"),Object(r.b)("p",null,"The maximum number of ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/about/data-model/#event"}),"events")," allowed in the buffer. See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#buffers--batches"}),"Buffers & Batches")," for more info.")),Object(r.b)(m.a,{common:!1,defaultValue:null,enumValues:null,examples:[1049e5],name:"max_size",path:"buffer",relevantWhen:{type:"disk"},required:!1,templateable:!1,type:"int",unit:"bytes",mdxType:"Field"},Object(r.b)("h4",{id:"max_size"},"max_size"),Object(r.b)("p",null,"The maximum size of the buffer on the disk.")),Object(r.b)(m.a,{common:!1,defaultValue:"memory",enumValues:{memory:"Stores the sink's buffer in memory. This is more performant (~3x), but less durable. Data will be lost if Vector is restarted abruptly.",disk:"Stores the sink's buffer on disk. This is less performance (~3x),  but durable. Data will not be lost between restarts."},examples:["memory","disk"],name:"type",path:"buffer",relevantWhen:null,required:!1,templateable:!1,type:"string",unit:null,mdxType:"Field"},Object(r.b)("h4",{id:"type"},"type"),Object(r.b)("p",null,"The buffer's type / location. ",Object(r.b)("inlineCode",{parentName:"p"},"disk")," buffers are persistent and will be retained between restarts.")),Object(r.b)(m.a,{common:!1,defaultValue:"block",enumValues:{block:"Applies back pressure when the buffer is full. This prevents data loss, but will cause data to pile up on the edge.",drop_newest:"Drops new data as it's received. This data is lost. This should be used when performance is the highest priority."},examples:["block","drop_newest"],name:"when_full",path:"buffer",relevantWhen:null,required:!1,templateable:!1,type:"string",unit:null,mdxType:"Field"},Object(r.b)("h4",{id:"when_full"},"when_full"),Object(r.b)("p",null,"The behavior when the buffer becomes full.")))),Object(r.b)(m.a,{common:!0,defaultValue:!0,enumValues:null,examples:[!0,!1],name:"create_missing_group",path:null,relevantWhen:null,required:!1,templateable:!1,type:"bool",unit:null,mdxType:"Field"},Object(r.b)("h3",{id:"create_missing_group"},"create_missing_group"),Object(r.b)("p",null,"Dynamically create a ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/Working-with-log-groups-and-streams.html"}),"log group")," if it does not already exist. This will ignore ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#create_missing_stream"}),Object(r.b)("inlineCode",{parentName:"a"},"create_missing_stream"))," directly after creating the group and will create the first stream.")),Object(r.b)(m.a,{common:!0,defaultValue:!0,enumValues:null,examples:[!0,!1],name:"create_missing_stream",path:null,relevantWhen:null,required:!1,templateable:!1,type:"bool",unit:null,mdxType:"Field"},Object(r.b)("h3",{id:"create_missing_stream"},"create_missing_stream"),Object(r.b)("p",null,"Dynamically create a ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/Working-with-log-groups-and-streams.html"}),"log stream")," if it does not already exist.")),Object(r.b)(m.a,{common:!1,defaultValue:null,enumValues:{json:"Each event is encoded into JSON and the payload is represented as a JSON array.",text:"Each event is encoded into text via the `message` key and the payload is new line delimited."},examples:["json","text"],name:"encoding",path:null,relevantWhen:null,required:!1,templateable:!1,type:"string",unit:null,mdxType:"Field"},Object(r.b)("h3",{id:"encoding"},"encoding"),Object(r.b)("p",null,"The encoding format used to serialize the events before outputting.")),Object(r.b)(m.a,{common:!0,defaultValue:null,enumValues:null,examples:["{{ file }}","ec2/{{ instance_id }}","group-name"],name:"group_name",path:null,relevantWhen:null,required:!0,templateable:!0,type:"string",unit:null,mdxType:"Field"},Object(r.b)("h3",{id:"group_name"},"group_name"),Object(r.b)("p",null,"The ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/Working-with-log-groups-and-streams.html"}),"group name")," of the target CloudWatch Logs stream. See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#partitioning"}),"Partitioning")," and ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#template-syntax"}),"Template Syntax")," for more info.")),Object(r.b)(m.a,{common:!1,defaultValue:!0,enumValues:null,examples:[!0,!1],name:"healthcheck",path:null,relevantWhen:null,required:!1,templateable:!1,type:"bool",unit:null,mdxType:"Field"},Object(r.b)("h3",{id:"healthcheck"},"healthcheck"),Object(r.b)("p",null,"Enables/disables the sink healthcheck upon start. See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#health-checks"}),"Health Checks")," for more info.")),Object(r.b)(m.a,{common:!0,defaultValue:null,enumValues:null,examples:["us-east-1"],name:"region",path:null,relevantWhen:null,required:!0,templateable:!1,type:"string",unit:null,mdxType:"Field"},Object(r.b)("h3",{id:"region"},"region"),Object(r.b)("p",null,"The ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://docs.aws.amazon.com/general/latest/gr/rande.html#cwl_region"}),"AWS region")," of the target CloudWatch Logs stream resides.")),Object(r.b)(m.a,{common:!1,defaultValue:null,enumValues:null,examples:[],name:"request",path:null,relevantWhen:null,required:!1,templateable:!1,type:"table",unit:null,mdxType:"Field"},Object(r.b)("h3",{id:"request"},"request"),Object(r.b)("p",null,"Configures the sink request behavior."),Object(r.b)(o.a,{filters:!1,mdxType:"Fields"},Object(r.b)(m.a,{common:!1,defaultValue:5,enumValues:null,examples:[5],name:"in_flight_limit",path:"request",relevantWhen:null,required:!1,templateable:!1,type:"int",unit:null,mdxType:"Field"},Object(r.b)("h4",{id:"in_flight_limit"},"in_flight_limit"),Object(r.b)("p",null,"The maximum number of in-flight requests allowed at any given time. See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#rate-limits"}),"Rate Limits")," for more info.")),Object(r.b)(m.a,{common:!1,defaultValue:1,enumValues:null,examples:[1],name:"rate_limit_duration_secs",path:"request",relevantWhen:null,required:!1,templateable:!1,type:"int",unit:"seconds",mdxType:"Field"},Object(r.b)("h4",{id:"rate_limit_duration_secs"},"rate_limit_duration_secs"),Object(r.b)("p",null,"The window used for the ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#rate_limit_num"}),Object(r.b)("inlineCode",{parentName:"a"},"rate_limit_num"))," option See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#rate-limits"}),"Rate Limits")," for more info.")),Object(r.b)(m.a,{common:!1,defaultValue:5,enumValues:null,examples:[5],name:"rate_limit_num",path:"request",relevantWhen:null,required:!1,templateable:!1,type:"int",unit:null,mdxType:"Field"},Object(r.b)("h4",{id:"rate_limit_num"},"rate_limit_num"),Object(r.b)("p",null,"The maximum number of requests allowed within the ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#rate_limit_duration_secs"}),Object(r.b)("inlineCode",{parentName:"a"},"rate_limit_duration_secs"))," window. See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#rate-limits"}),"Rate Limits")," for more info.")),Object(r.b)(m.a,{common:!1,defaultValue:5,enumValues:null,examples:[5],name:"retry_attempts",path:"request",relevantWhen:null,required:!1,templateable:!1,type:"int",unit:null,mdxType:"Field"},Object(r.b)("h4",{id:"retry_attempts"},"retry_attempts"),Object(r.b)("p",null,"The maximum number of retries to make for failed requests. See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#retry-policy"}),"Retry Policy")," for more info.")),Object(r.b)(m.a,{common:!1,defaultValue:1,enumValues:null,examples:[1],name:"retry_initial_backoff_secs",path:"request",relevantWhen:null,required:!1,templateable:!1,type:"int",unit:"seconds",mdxType:"Field"},Object(r.b)("h4",{id:"retry_initial_backoff_secs"},"retry_initial_backoff_secs"),Object(r.b)("p",null,"The amount of time to wait before attempting the first retry for a failed request. Once, the first retry has failed the fibonacci sequence will be used to select future backoffs.")),Object(r.b)(m.a,{common:!1,defaultValue:10,enumValues:null,examples:[10],name:"retry_max_duration_secs",path:"request",relevantWhen:null,required:!1,templateable:!1,type:"int",unit:"seconds",mdxType:"Field"},Object(r.b)("h4",{id:"retry_max_duration_secs"},"retry_max_duration_secs"),Object(r.b)("p",null,"The maximum amount of time to wait between retries.")),Object(r.b)(m.a,{common:!1,defaultValue:30,enumValues:null,examples:[30],name:"timeout_secs",path:"request",relevantWhen:null,required:!1,templateable:!1,type:"int",unit:"seconds",mdxType:"Field"},Object(r.b)("h4",{id:"timeout_secs-1"},"timeout_secs"),Object(r.b)("p",null,"The maximum time a request can take before being aborted. It is highly recommended that you do not lower value below the service's internal timeout, as this could create orphaned requests, pile on retries, and result in deuplicate data downstream. See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#buffers--batches"}),"Buffers & Batches")," for more info.")))),Object(r.b)(m.a,{common:!0,defaultValue:null,enumValues:null,examples:["{{ instance_id }}","%Y-%m-%d","stream-name"],name:"stream_name",path:null,relevantWhen:null,required:!0,templateable:!0,type:"string",unit:null,mdxType:"Field"},Object(r.b)("h3",{id:"stream_name"},"stream_name"),Object(r.b)("p",null,"The ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/Working-with-log-groups-and-streams.html"}),"stream name")," of the target CloudWatch Logs stream. See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#partitioning"}),"Partitioning")," and ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#template-syntax"}),"Template Syntax")," for more info."))),Object(r.b)("h2",{id:"output"},"Output"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"aws_cloudwatch_logs")," sink ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#buffers--batches"}),"batches")," ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/about/data-model/log/"}),Object(r.b)("inlineCode",{parentName:"a"},"log"))," events to ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/WhatIsCloudWatchLogs.html"}),"Amazon Web Service's CloudWatch Logs service")," via the ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutLogEvents.html"}),Object(r.b)("inlineCode",{parentName:"a"},"PutLogEvents")," API endpoint"),".\nBatches are flushed via the ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#batch_size"}),Object(r.b)("inlineCode",{parentName:"a"},"batch_size"))," or\n",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#batch_timeout"}),Object(r.b)("inlineCode",{parentName:"a"},"batch_timeout"))," options. You can learn more in the ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#buffers--batches"}),"buffers &\nbatches")," section.\nFor example:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-http"}),'POST / HTTP/1.1\nHost: logs.<region>.<domain>\nX-Amz-Date: <date>\nAccept: application/json\nContent-Type: application/x-amz-json-1.1\nContent-Length: <byte_size>\nConnection: Keep-Alive\nX-Amz-Target: Logs_20140328.PutLogEvents\n\n{\n  "logGroupName": "<group_name>",\n  "logStreamName": "<stream_name>",\n  "logEvents": [\n    {\n      "timestamp": <log_timestamp>,\n      "message": "<json_encoded_log>"\n    },\n    {\n      "timestamp": <log_timestamp>,\n      "message": "<json_encoded_log>"\n    },\n    {\n      "timestamp": <log_timestamp>,\n      "message": "<json_encoded_log>"\n    }\n  ]\n}\n')),Object(r.b)("h2",{id:"how-it-works"},"How It Works"),Object(r.b)("h3",{id:"buffers--batches"},"Buffers & Batches"),Object(r.b)(b.a,{src:"/img/buffers-and-batches-partitioned.svg",mdxType:"SVG"}),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"aws_cloudwatch_logs")," sink buffers & batches data as\nshown in the diagram above. You'll notice that Vector treats these concepts\ndifferently, instead of treating them as global concepts, Vector treats them\nas sink specific concepts. This isolates sinks, ensuring services disruptions\nare contained and ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/about/guarantees/"}),"delivery guarantees")," are honored."),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"Batches")," are flushed when 1 of 2 conditions are met:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"The batch age meets or exceeds the configured ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#timeout_secs"}),Object(r.b)("inlineCode",{parentName:"a"},"timeout_secs")),"."),Object(r.b)("li",{parentName:"ol"},"The batch size meets or exceeds the configured ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#max_events"}),Object(r.b)("inlineCode",{parentName:"a"},"max_events")),".")),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"Buffers")," are controlled via the ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#buffer"}),Object(r.b)("inlineCode",{parentName:"a"},"buffer.*"))," options."),Object(r.b)("h3",{id:"environment-variables"},"Environment Variables"),Object(r.b)("p",null,"Environment variables are supported through all of Vector's configuration.\nSimply add ",Object(r.b)("inlineCode",{parentName:"p"},"${MY_ENV_VAR}")," in your Vector configuration file and the variable\nwill be replaced before being evaluated."),Object(r.b)("p",null,"You can learn more in the ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/setup/configuration/#environment-variables"}),"Environment Variables"),"\nsection."),Object(r.b)("h3",{id:"health-checks"},"Health Checks"),Object(r.b)("p",null,"Health checks ensure that the downstream service is accessible and ready to\naccept data. This check is performed upon sink initialization.\nIf the health check fails an error will be logged and Vector will proceed to\nstart."),Object(r.b)("h4",{id:"require-health-checks"},"Require Health Checks"),Object(r.b)("p",null,"If you'd like to exit immediately upon a health check failure, you can\npass the ",Object(r.b)("inlineCode",{parentName:"p"},"--require-healthy")," flag:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"vector --config /etc/vector/vector.toml --require-healthy\n")),Object(r.b)("h4",{id:"disable-health-checks"},"Disable Health Checks"),Object(r.b)("p",null,"If you'd like to disable health checks for this sink you can set the\n",Object(r.b)("inlineCode",{parentName:"p"},"healthcheck")," option to ",Object(r.b)("inlineCode",{parentName:"p"},"false"),"."),Object(r.b)("h3",{id:"partitioning"},"Partitioning"),Object(r.b)("p",null,"Partitioning is controlled via the ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#group_name"}),Object(r.b)("inlineCode",{parentName:"a"},"group_name"))," and ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#stream_name"}),Object(r.b)("inlineCode",{parentName:"a"},"stream_name")),"\noptions and allows you to dynamically partition data on the fly.\nYou'll notice that Vector's ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#template-syntax"}),"template sytax")," is supported\nfor these options, enabling you to use field values as the partition's key."),Object(r.b)("h3",{id:"rate-limits"},"Rate Limits"),Object(r.b)("p",null,"Vector offers a few levers to control the rate and volume of requests to the\ndownstream service. Start with the ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#rate_limit_duration_secs"}),Object(r.b)("inlineCode",{parentName:"a"},"rate_limit_duration_secs"))," and\n",Object(r.b)("inlineCode",{parentName:"p"},"rate_limit_num")," options to ensure Vector does not exceed the specified\nnumber of requests in the specified window. You can further control the pace at\nwhich this window is saturated with the ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#in_flight_limit"}),Object(r.b)("inlineCode",{parentName:"a"},"in_flight_limit"))," option, which\nwill guarantee no more than the specified number of requests are in-flight at\nany given time."),Object(r.b)("p",null,"Please note, Vector's defaults are carefully chosen and it should be rare that\nyou need to adjust these. If you found a good reason to do so please share it\nwith the Vector team by ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/timberio/vector/issues/new?labels=sink%3A+aws_cloudwatch_logs"}),"opening an issie"),"."),Object(r.b)("h3",{id:"retry-policy"},"Retry Policy"),Object(r.b)("p",null,"Vector will retry failed requests (status == ",Object(r.b)("inlineCode",{parentName:"p"},"429"),", >= ",Object(r.b)("inlineCode",{parentName:"p"},"500"),", and != ",Object(r.b)("inlineCode",{parentName:"p"},"501"),").\nOther responses will ",Object(r.b)("em",{parentName:"p"},"not")," be retried. You can control the number of retry\nattempts and backoff rate with the ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#retry_attempts"}),Object(r.b)("inlineCode",{parentName:"a"},"retry_attempts"))," and\n",Object(r.b)("inlineCode",{parentName:"p"},"retry_backoff_secs")," options."),Object(r.b)("h3",{id:"template-syntax"},"Template Syntax"),Object(r.b)("p",null,"The ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#group_name"}),Object(r.b)("inlineCode",{parentName:"a"},"group_name"))," and ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#stream_name"}),Object(r.b)("inlineCode",{parentName:"a"},"stream_name"))," options\nsupport ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/setup/configuration/#template-syntax"}),"Vector's template syntax"),",\nenabling dynamic values derived from the event's data. This syntax accepts\n",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://docs.rs/chrono/0.3.1/chrono/format/strftime/index.html"}),"strptime specifiers")," as well as the\n",Object(r.b)("inlineCode",{parentName:"p"},"{{ field_name }}")," syntax for accessing event fields. For example:"),Object(r.b)(c.a,{fileName:"vector.toml",mdxType:"CodeHeader"}),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-toml"}),'[sinks.my_aws_cloudwatch_logs_sink_id]\n  # ...\n  group_name = "{{ file }}"\n  group_name = "ec2/{{ instance_id }}"\n  group_name = "group-name"\n  # ...\n')),Object(r.b)("p",null,"You can read more about the complete syntax in the\n",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/setup/configuration/#template-syntax"}),"template syntax section"),"."))}j.isMDXComponent=!0},245:function(e,t,a){"use strict";var n=a(0),l=a.n(n);a(85);t.a=function({children:e,filters:t}){const[a,r]=Object(n.useState)(!1),[s,i]=Object(n.useState)(!1),[c,o]=Object(n.useState)(null);let m=Array.isArray(e)?e:[e],u=m.some(e=>e.props.common),b=m.some(e=>e.props.required),d=m;return a&&(d=d.filter(e=>e.props.common)),s&&(d=d.filter(e=>e.props.required)),c&&(d=d.filter(e=>e.props.name.toLowerCase().includes(c.toLowerCase()))),l.a.createElement("div",{className:"fields"},m.length>1&&!1!==t?l.a.createElement("div",{className:"filters"},l.a.createElement("span",{className:"result-count"},d.length," items"),l.a.createElement("div",{className:" search"},l.a.createElement("input",{type:"text",onChange:e=>o(e.currentTarget.value),placeholder:"\ud83d\udd0d Search..."})),l.a.createElement("div",{className:"checkboxes"},u&&l.a.createElement("label",{title:"Only show popular/common results"},l.a.createElement("input",{type:"checkbox",onChange:e=>r(e.currentTarget.checked),checked:a}),"common only"),b&&l.a.createElement("label",{title:"Only show required results"},l.a.createElement("input",{type:"checkbox",onChange:e=>i(e.currentTarget.checked),checked:s}),"required only"))):null,l.a.createElement("div",{className:"section-list"},!Array.isArray(d)||d.length>0?d:l.a.createElement("div",{className:"empty"},l.a.createElement("div",{className:"icon"},"\u2639"),l.a.createElement("div",null,"No fields found"))))}},246:function(e,t,a){"use strict";a(12);var n=a(0),l=a.n(n),r=a(241),s=a.n(r),i=(a(242),a(244)),c=a(251);function o(e){return JSON.stringify(e)}function m(e){return e.includes(".")?'"'+e+'"':e}function u(e,t){return(a=t)&&a.constructor===Object?"name"in t&&"value"in t?`${m(t.name)} = ${o(t.value)}`:`${m(Object.keys(t)[0])} = ${o(Object.values(t)[0])}`:e?`${e} = ${o(t)}`:`${o(t)}`;var a}function b({values:e}){let t=[];if(Array.isArray(e))for(var a in e){let n=e[a];t.push(l.a.createElement("code",{key:n},o(n))),t.push(" ")}else for(var n in e)t.push(l.a.createElement("code",{key:n,title:e[n]},o(n))),t.push(" ");return t}function d({name:e,path:t,value:a}){return l.a.createElement("code",null,u(null,a))}function p({name:e,path:t,values:a}){let n="";return a.forEach((function(t){n+=u(e,t)+"\n"})),t&&(n=`[${t}]\n${n}`),l.a.createElement("div",null,l.a.createElement(i.a,{fileName:"vector.toml"}),l.a.createElement(c.a,{className:"language-toml"},n))}function h({value:e}){let t=Object.keys(e)[0],a=Object.values(e)[0];return l.a.createElement("span",null,l.a.createElement("code",null,l.a.createElement("a",{href:`#${t}`},t))," = ",l.a.createElement("code",null,o(a)))}function f({defaultValue:e,enumValues:t,examples:a,name:r,path:s,relevantWhen:i}){const[c,o]=Object(n.useState)(!1);return e||t||a&&a.length>0?l.a.createElement("div",{className:"info"},void 0!==e?e?l.a.createElement("div",null,"Default: ",l.a.createElement(d,{name:r,path:s,value:e})):l.a.createElement("div",null,"No default"):null,t?l.a.createElement("div",null,"Enum, must be one of: ",l.a.createElement(b,{values:t})):null,i?l.a.createElement("div",null,"Only relevant when: ",l.a.createElement(h,{value:i})):null,l.a.createElement("div",null,l.a.createElement("div",{className:"show-more",onClick:()=>o(!c)},c?"Hide examples":"View examples"),c&&l.a.createElement("div",{className:"examples"},l.a.createElement(p,{name:r,path:s,values:a})))):null}t.a=function({children:e,common:t,defaultValue:a,enumValues:r,examples:i,name:c,path:o,relevantWhen:m,templateable:u,type:b,unit:d,required:p}){const[h,O]=Object(n.useState)(!1);let j=e;return h&&(j=j.filter(e=>"p"!=e.props.originalType)),l.a.createElement("div",{className:s()("field","section",p?"field-required":"",h?"field-collapsed":""),required:p},l.a.createElement("div",{className:"badges"},t&&l.a.createElement("span",{className:"badge badge--primary",title:"This is a popular that we recommend for getting started"},"common"),u&&l.a.createElement("span",{className:"badge badge--primary",title:"This option is dynamic and accepts the Vector template syntax"},"templateable"),l.a.createElement("span",{className:"badge badge--secondary"},b),r&&Object.keys(r).length>0&&l.a.createElement("span",{className:"badge badge--secondary",title:"This option is an enumation and only allows specific values"},"enum"),d&&l.a.createElement("span",{className:"badge badge--secondary"},d),p?l.a.createElement("span",{className:"badge badge--danger"},"required"):l.a.createElement("span",{className:"badge badge--secondary"},"optional")),j,!h&&l.a.createElement(f,{defaultValue:a,enumValues:r,examples:i,name:c,path:o,relevantWhen:m}))}},247:function(e,t,a){"use strict";var n=a(1),l=a(0),r=a.n(l),s=a(252),i=a(241),c=a.n(i),o=a(253),m=a.n(o);function u({block:e,centered:t,className:a,style:n,values:l,selectedValue:s,setSelectedValue:i}){return r.a.createElement("div",{className:t?"tabs--centered":""},r.a.createElement("ul",{className:c()("tabs",a,{"tabs--block":e}),style:n},l.map(({value:e,label:t})=>r.a.createElement("li",{className:c()("tab-item",{"tab-item--active":s===e}),key:e,onClick:()=>i(e)},t))))}function b({selectedValue:e,setSelectedValue:t,values:a}){return r.a.createElement(s.a,{className:"react-select-container",classNamePrefix:"react-select",options:a,isClearable:!1,placeholder:"Select a version...",value:a.find(t=>t.value==e),onChange:e=>t(e?e.value:null)})}t.a=function(e){const{block:t,centered:a,children:s,defaultValue:i,select:c,style:o,values:d,urlKey:p}=e,[h,f]=Object(l.useState)(i);return Object(l.useEffect)(()=>{if("undefined"!=typeof window&&window.location&&p){let e=m.a.parse(window.location.search);e[p]&&f(e[p])}},[]),r.a.createElement("div",null,d.length>1&&(c?r.a.createElement(b,Object(n.a)({selectedValue:h,setSelectedValue:f},e)):r.a.createElement(u,Object(n.a)({selectedValue:h,setSelectedValue:f},e))),r.a.createElement("div",{className:"margin-vert--md"},l.Children.toArray(s).filter(e=>e.props.value===h)[0]))}},248:function(e,t,a){"use strict";var n=a(0),l=a.n(n);t.a=function(e){return l.a.createElement("div",null,e.children)}}}]);