(window.webpackJsonp=window.webpackJsonp||[]).push([[97],{195:function(e,t,o){"use strict";o.r(t),o.d(t,"frontMatter",(function(){return c})),o.d(t,"metadata",(function(){return i})),o.d(t,"rightToc",(function(){return d})),o.d(t,"default",(function(){return u}));var n=o(1),r=o(6),a=(o(0),o(242)),s=o(250),c={title:"Deployment",sidebar_label:"hidden",description:"How to deploy Vector into your own infrastructure",hide_pagination:!0},i={id:"setup/deployment",title:"Deployment",description:"How to deploy Vector into your own infrastructure",source:"@site/docs/setup/deployment.md",permalink:"/docs/setup/deployment",editUrl:"https://github.com/brainrexapi/edit/master/docs/setup/deployment.md",sidebar_label:"hidden",sidebar:"docs",previous:{title:"Configuration",permalink:"/docs/setup/configuration"},next:{title:"Vector Deployment Roles",permalink:"/docs/setup/deployment/roles"}},d=[],p={rightToc:d},l="wrapper";function u(e){var t=e.components,o=Object(r.a)(e,["components"]);return Object(a.b)(l,Object(n.a)({},p,o,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"This section will cover deploying Vector. Vector is designed to be the single\nand only tool needed to get data from A to B, serving both as an\n",Object(a.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/setup/deployment/roles/agent/"}),"agent")," and a ",Object(a.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/setup/deployment/roles/service/"}),"service"),". You combine\nthese roles to form ",Object(a.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/setup/deployment/topologies/"}),"topologies"),"."),Object(a.b)("p",null,"Start by becoming familiar with the ",Object(a.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/setup/deployment/roles/"}),"roles")," and then take a closer\nlook at the ",Object(a.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/setup/deployment/roles/"}),"topologies")," you can create."),Object(a.b)("hr",null),Object(a.b)(s.a,{to:"/docs/setup/deployment/roles/",mdxType:"Jump"},"Roles"),Object(a.b)(s.a,{to:"/docs/setup/deployment/topologies/",mdxType:"Jump"},"Topologies"))}u.isMDXComponent=!0},243:function(e,t,o){"use strict";var n=o(1),r=o(0),a=o.n(r),s=o(17);const c=/^\/(?!\/)/;t.a=function(e){const{to:t,href:o}=e,i=t||o,d=c.test(i),p=Object(r.useRef)(!1),l="undefined"!=typeof window&&"IntersectionObserver"in window;let u;return Object(r.useEffect)(()=>(!l&&d&&window.docusaurus.prefetch(i),()=>{l&&u&&u.disconnect()}),[i,l,d]),i&&d?a.a.createElement(s.b,Object(n.a)({},e,{onMouseEnter:()=>{p.current||(window.docusaurus.preload(i),p.current=!0)},innerRef:e=>{l&&e&&d&&((e,t)=>{u=new window.IntersectionObserver(o=>{o.forEach(o=>{e===o.target&&(o.isIntersecting||o.intersectionRatio>0)&&(u.unobserve(e),u.disconnect(),t())})}),u.observe(e)})(e,()=>{window.docusaurus.prefetch(i)})},to:i})):a.a.createElement("a",Object(n.a)({},e,{href:i}))}},250:function(e,t,o){"use strict";var n=o(0),r=o.n(n),a=o(243),s=o(241),c=o.n(s);o(86);t.a=function({children:e,className:t,badge:o,icon:n,size:s,target:i,to:d}){let p=c()("jump-to",`jump-to--${s}`,t),l=r.a.createElement("div",{className:"jump-to--inner"},r.a.createElement("div",{className:"jump-to--inner-2"},r.a.createElement("div",{className:"jump-to--main"},o?r.a.createElement("span",{className:"badge badge--primary badge--right"},o):"",e),r.a.createElement("div",{className:"jump-to--right"},r.a.createElement("i",{className:`feather icon-${n||"chevron-right"} arrow`}))));return i?r.a.createElement("a",{href:d,target:i,className:p},l):r.a.createElement(a.a,{to:d,className:p},l)}}}]);