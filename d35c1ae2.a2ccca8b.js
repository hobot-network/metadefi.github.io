(window.webpackJsonp=window.webpackJsonp||[]).push([[119],{220:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return u})),n.d(t,"metadata",(function(){return b})),n.d(t,"rightToc",(function(){return d})),n.d(t,"default",(function(){return h}));var a=n(1),l=n(6),r=(n(0),n(242)),i=n(244),o=n(245),s=n(246),c=n(247),m=n(248),u={description:"The Vector `log_to_metric` transform accepts `log` events and allows you to convert logs into one or more metrics.",event_types:["log","metric"],issues_url:"https://github.com/timberio/vector/issues?q=is%3Aopen+is%3Aissue+label%3A%22transform%3A+log_to_metric%22",sidebar_label:'log_to_metric|["log","metric"]',source_url:"https://github.com/timberio/vector/tree/master/src/transforms/log_to_metric.rs",status:"prod-ready",title:"Log to Metric Transform"},b={id:"reference/transforms/log_to_metric",title:"Log to Metric Transform",description:"The Vector `log_to_metric` transform accepts `log` events and allows you to convert logs into one or more metrics.",source:"@site/docs/reference/transforms/log_to_metric.md",permalink:"/docs/reference/transforms/log_to_metric",editUrl:"https://github.com/brainrexapi/edit/master/docs/reference/transforms/log_to_metric.md",sidebar_label:'log_to_metric|["log","metric"]',sidebar:"docs",previous:{title:"JSON Parser Transform",permalink:"/docs/reference/transforms/json_parser"},next:{title:"LUA Transform",permalink:"/docs/reference/transforms/lua"}},d=[{value:"Configuration",id:"configuration",children:[]},{value:"Options",id:"options",children:[{value:"metrics",id:"metrics",children:[]}]},{value:"Output",id:"output",children:[]},{value:"How It Works",id:"how-it-works",children:[{value:"Environment Variables",id:"environment-variables",children:[]},{value:"Multiple Metrics",id:"multiple-metrics",children:[]},{value:"Null Fields",id:"null-fields",children:[]},{value:"Reducing",id:"reducing",children:[]}]}],p={rightToc:d},g="wrapper";function h(e){var t=e.components,n=Object(l.a)(e,["components"]);return Object(r.b)(g,Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"The Vector ",Object(r.b)("inlineCode",{parentName:"p"},"log_to_metric")," transform accepts ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/about/data-model/log/"}),Object(r.b)("inlineCode",{parentName:"a"},"log"))," events and allows you to convert logs into one or more metrics."),Object(r.b)("h2",{id:"configuration"},"Configuration"),Object(r.b)(i.a,{fileName:"vector.toml",mdxType:"CodeHeader"}),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-toml"}),'[transforms.log_to_metric]\n  type = "log_to_metric"\n\n  [[transforms.log_to_metric.metrics]]\n    type = "histogram"\n    field = "time"\n    name = "time_ms" # optional\n    tags.status = "{{status}}" # optional\n    tags.host = "{{host}}" # optional\n    tags.env = "${ENV}" # optional\n')),Object(r.b)("h2",{id:"options"},"Options"),Object(r.b)(o.a,{filters:!0,mdxType:"Fields"},Object(r.b)(s.a,{common:!0,defaultValue:null,enumValues:null,examples:[],name:"metrics",path:null,relevantWhen:null,required:!0,templateable:!1,type:"[table]",unit:null,mdxType:"Field"},Object(r.b)("h3",{id:"metrics"},"metrics"),Object(r.b)("p",null,"A table of key/value pairs representing the keys to be added to the event."),Object(r.b)(o.a,{filters:!1,mdxType:"Fields"},Object(r.b)(s.a,{common:!0,defaultValue:null,enumValues:null,examples:["duration"],name:"field",path:"metrics",relevantWhen:null,required:!0,templateable:!1,type:"string",unit:null,mdxType:"Field"},Object(r.b)("h4",{id:"field"},"field"),Object(r.b)("p",null,"The log field to use as the metric. See ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#null-fields"}),"Null Fields")," for more info.")),Object(r.b)(s.a,{common:!0,defaultValue:!1,enumValues:null,examples:[!1,!0],name:"increment_by_value",path:"metrics",relevantWhen:{type:"counter"},required:!0,templateable:!1,type:"bool",unit:null,mdxType:"Field"},Object(r.b)("h4",{id:"increment_by_value"},"increment_by_value"),Object(r.b)("p",null,"If ",Object(r.b)("inlineCode",{parentName:"p"},"true")," the metric will be incremented by the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#field"}),Object(r.b)("inlineCode",{parentName:"a"},"field"))," value. If ",Object(r.b)("inlineCode",{parentName:"p"},"false")," the metric will be incremented by 1 regardless of the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#field"}),Object(r.b)("inlineCode",{parentName:"a"},"field"))," value.")),Object(r.b)(s.a,{common:!0,defaultValue:null,enumValues:null,examples:["duration_total"],name:"name",path:"metrics",relevantWhen:null,required:!0,templateable:!1,type:"string",unit:null,mdxType:"Field"},Object(r.b)("h4",{id:"name"},"name"),Object(r.b)("p",null,"The name of the metric. Defaults to ",Object(r.b)("inlineCode",{parentName:"p"},"<field>_total")," for ",Object(r.b)("inlineCode",{parentName:"p"},"counter")," and ",Object(r.b)("inlineCode",{parentName:"p"},"<field>")," for ",Object(r.b)("inlineCode",{parentName:"p"},"gauge"),".")),Object(r.b)(s.a,{common:!0,defaultValue:null,enumValues:null,examples:[],name:"tags",path:"metrics",relevantWhen:null,required:!1,templateable:!1,type:"table",unit:null,mdxType:"Field"},Object(r.b)("h4",{id:"tags"},"tags"),Object(r.b)("p",null,"Key/value pairs representing ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/about/data-model/metric/#tags"}),"metric tags"),"."),Object(r.b)(o.a,{filters:!1,mdxType:"Fields"},Object(r.b)(s.a,{common:!0,defaultValue:null,enumValues:null,examples:[{host:"${HOSTNAME}"},{region:"us-east-1"},{status:"{{status}}"}],name:"`[tag-name]`",path:"metrics.tags",relevantWhen:null,required:!0,templateable:!1,type:"string",unit:null,mdxType:"Field"},Object(r.b)("h5",{id:"tag-name"},Object(r.b)("inlineCode",{parentName:"h5"},"[tag-name]")),Object(r.b)("p",null,"Key/value pairs representing ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/about/data-model/metric/#tags"}),"metric tags"),". Environment variables and field interpolation is allowed.")))),Object(r.b)(s.a,{common:!0,defaultValue:null,enumValues:{counter:"A [counter metric type][docs.data-model.metric#counter].",gauge:"A [gauge metric type][docs.data-model.metric#gauge].",histogram:"A [distribution metric type][docs.data-model.metric#distribution].",set:"A [set metric type][docs.data-model.metric#set]."},examples:["counter","gauge","histogram","set"],name:"type",path:"metrics",relevantWhen:null,required:!0,templateable:!1,type:"string",unit:null,mdxType:"Field"},Object(r.b)("h4",{id:"type"},"type"),Object(r.b)("p",null,"The metric type."))))),Object(r.b)("h2",{id:"output"},"Output"),Object(r.b)(c.a,{block:!0,defaultValue:"timings",values:[{label:"Timings",value:"timings"},{label:"Counting",value:"counting"},{label:"Summing",value:"summing"},{label:"Gauges",value:"gauges"},{label:"Sets",value:"sets"}],mdxType:"Tabs"},Object(r.b)(m.a,{value:"timings",mdxType:"TabItem"},Object(r.b)("p",null,"This example demonstrates capturing timings in your logs."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "host": "10.22.11.222",\n  "message": "Sent 200 in 54.2ms",\n  "status": 200,\n  "time": 54.2,\n}\n')),Object(r.b)("p",null,"You can convert the ",Object(r.b)("inlineCode",{parentName:"p"},"time")," field into a ",Object(r.b)("inlineCode",{parentName:"p"},"distribution")," metric:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-toml"}),'[transforms.log_to_metric]\n  type = "log_to_metric"\n\n  [[transforms.log_to_metric.metrics]]\n    type = "histogram"\n    field = "time"\n    name = "time_ms" # optional\n    tags.status = "{{status}}" # optional\n    tags.host = "{{host}}" # optional\n')),Object(r.b)("p",null,"A ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/about/data-model/metric/"}),Object(r.b)("inlineCode",{parentName:"a"},"metric")," event")," will be output with the following\nstructure:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'{\n  "name": "time_ms",\n  "kind": "incremental",\n  "tags": {\n    "status": "200",\n    "host": "10.22.11.222"\n  }\n  "value": {\n    "type": "distribution",\n    "values": [54.2],\n    "sample_rates": [1.0]\n  }\n}\n')),Object(r.b)("p",null,"This metric will then proceed down the pipeline, and depending on the sink,\nwill be aggregated in Vector (such is the case for the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/reference/sinks/prometheus/"}),Object(r.b)("inlineCode",{parentName:"a"},"prometheus")," \\\nsink"),") or will be aggregated in the store itself.")),Object(r.b)(m.a,{value:"counting",mdxType:"TabItem"},Object(r.b)("p",null,"This example demonstrates counting HTTP status codes."),Object(r.b)("p",null,"Given the following log line:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "host": "10.22.11.222",\n  "message": "Sent 200 in 54.2ms",\n  "status": 200\n}\n')),Object(r.b)("p",null,"You can count the number of responses by status code:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-toml"}),'[transforms.log_to_metric]\n  type = "log_to_metric"\n\n  [[transforms.log_to_metric.metrics]]\n    type = "counter"\n    field = "status"\n    name = "response_total" # optional\n    tags.status = "{{status}}"\n    tags.host = "{{host}}"\n')),Object(r.b)("p",null,"A ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/about/data-model/metric/"}),Object(r.b)("inlineCode",{parentName:"a"},"metric")," event")," will be output with the following\nstructure:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'{\n  "name": "response_total",\n  "kind": "incremental",\n  "tags": {\n    "status": "200",\n    "host": "10.22.11.222"\n  }\n  "value": {\n    "type": "counter",\n    "value": 1.0,\n  }\n}\n')),Object(r.b)("p",null,"This metric will then proceed down the pipeline, and depending on the sink,\nwill be aggregated in Vector (such is the case for the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/reference/sinks/prometheus/"}),Object(r.b)("inlineCode",{parentName:"a"},"prometheus")," \\\nsink"),") or will be aggregated in the store itself.")),Object(r.b)(m.a,{value:"summing",mdxType:"TabItem"},Object(r.b)("p",null,"In this example we'll demonstrate computing a sum. The scenario we've chosen\nis to compute the total of orders placed."),Object(r.b)("p",null,"Given the following log line:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "host": "10.22.11.222",\n  "message": "Order placed for $122.20",\n  "total": 122.2\n}\n')),Object(r.b)("p",null,"You can reduce this log into a ",Object(r.b)("inlineCode",{parentName:"p"},"counter")," metric that increases by the\nfield's value:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-toml"}),'[transforms.log_to_metric]\n  type = "log_to_metric"\n\n  [[transforms.log_to_metric.metrics]]\n    type = "counter"\n    field = "total"\n    name = "order_total" # optional\n    increment_by_value = true # optional\n    tags.host = "{{host}}" # optional\n')),Object(r.b)("p",null,"A ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/about/data-model/metric/"}),Object(r.b)("inlineCode",{parentName:"a"},"metric")," event")," will be output with the following\nstructure:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'{\n  "name": "order_total",\n  "kind": "incremental",\n  "tags": {\n    "status": "200",\n    "host": "10.22.11.222"\n  }\n  "value": {\n    "type": "counter",\n    "value": 122.20,\n  }\n}\n')),Object(r.b)("p",null,"This metric will then proceed down the pipeline, and depending on the sink,\nwill be aggregated in Vector (such is the case for the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/reference/sinks/prometheus/"}),Object(r.b)("inlineCode",{parentName:"a"},"prometheus")," \\\nsink"),") or will be aggregated in the store itself.")),Object(r.b)(m.a,{value:"gauges",mdxType:"TabItem"},Object(r.b)("p",null,"In this example we'll demonstrate creating a gauge that represents the current\nCPU load verages."),Object(r.b)("p",null,"Given the following log line:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "host": "10.22.11.222",\n  "message": "CPU activity sample",\n  "1m_load_avg": 78.2,\n  "5m_load_avg": 56.2,\n  "15m_load_avg": 48.7\n}\n')),Object(r.b)("p",null,"You can reduce this logs into multiple ",Object(r.b)("inlineCode",{parentName:"p"},"gauge")," metrics:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-toml"}),'[transforms.log_to_metric]\n  type = "log_to_metric"\n\n  [[transforms.log_to_metric.metrics]]\n    type = "gauge"\n    field = "1m_load_avg"\n    tags.host = "{{host}}" # optional\n\n  [[transforms.log_to_metric.metrics]]\n    type = "gauge"\n    field = "5m_load_avg"\n    tags.host = "{{host}}" # optional\n\n  [[transforms.log_to_metric.metrics]]\n    type = "gauge"\n    field = "15m_load_avg"\n    tags.host = "{{host}}" # optional\n')),Object(r.b)("p",null,"Multiple ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/about/data-model/metric/"}),Object(r.b)("inlineCode",{parentName:"a"},"metric")," events")," will be output with the following\nstructure:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'[\n  {\n    "name": "1m_load_avg",\n    "kind": "absolute",\n    "tags": {\n      "host": "10.22.11.222"\n    },\n    "value": {\n      "type": "gauge",\n      "value": 78.2\n    }\n  },\n  {\n    "name": "5m_load_avg",\n    "kind": "absolute",\n    "tags": {\n      "host": "10.22.11.222"\n    },\n    "value": {\n      "type": "gauge",\n      "value": 56.2\n    }\n  },\n  {\n    "name": "15m_load_avg",\n    "kind": "absolute",\n    "tags": {\n      "host": "10.22.11.222"\n    },\n    "value": {\n      "type": "gauge",\n      "value": 48.7\n    }\n  }\n]\n')),Object(r.b)("p",null,"This metric will then proceed down the pipeline, and depending on the sink,\nwill be aggregated in Vector (such is the case for the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/reference/sinks/prometheus/"}),Object(r.b)("inlineCode",{parentName:"a"},"prometheus")," \\\nsink"),") or will be aggregated in the store itself.")),Object(r.b)(m.a,{value:"sets",mdxType:"TabItem"},Object(r.b)("p",null,"In this example we'll demonstrate how to use sets. Sets are primarly a Statsd\nconcept that represent the number of unique values seens for a given metric.\nThe idea is that you pass the unique/high-cardinality value as the metric value\nand the metric store will count the number of unique values seen."),Object(r.b)("p",null,"For example, given the following log line:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "host": "10.22.11.222",\n  "message": "Sent 200 in 54.2ms",\n  "remote_addr": "233.221.232.22"\n}\n')),Object(r.b)("p",null,"You can count the number of unique ",Object(r.b)("inlineCode",{parentName:"p"},"remote_addr")," values by using a set:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-toml"}),'[transforms.log_to_metric]\n  type = "log_to_metric"\n\n  [[transforms.log_to_metric.metrics]]\n    type = "set"\n    field = "remote_addr"\n    tags.host = "{{host}}" # optional\n')),Object(r.b)("p",null,"A ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/about/data-model/metric/"}),Object(r.b)("inlineCode",{parentName:"a"},"metric")," event")," will be output with the following\nstructure:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'{\n  "name": "remote_addr",\n  "kind": "incremental",\n  "tags": {\n    "host": "10.22.11.222"\n  },\n  "value": {\n    "type": "set",\n    "values": ["233.221.232.22"]\n  }\n}\n')),Object(r.b)("p",null,"This metric will then proceed down the pipeline, and depending on the sink,\nwill be aggregated in Vector (such is the case for the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/reference/sinks/prometheus/"}),Object(r.b)("inlineCode",{parentName:"a"},"prometheus")," \\\nsink"),") or will be aggregated in the store itself."))),Object(r.b)("h2",{id:"how-it-works"},"How It Works"),Object(r.b)("h3",{id:"environment-variables"},"Environment Variables"),Object(r.b)("p",null,"Environment variables are supported through all of Vector's configuration.\nSimply add ",Object(r.b)("inlineCode",{parentName:"p"},"${MY_ENV_VAR}")," in your Vector configuration file and the variable\nwill be replaced before being evaluated."),Object(r.b)("p",null,"You can learn more in the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/setup/configuration/#environment-variables"}),"Environment Variables"),"\nsection."),Object(r.b)("h3",{id:"multiple-metrics"},"Multiple Metrics"),Object(r.b)("p",null,"For clarification, when you convert a single ",Object(r.b)("inlineCode",{parentName:"p"},"log")," event into multiple ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#metric"}),Object(r.b)("inlineCode",{parentName:"a"},"metric")),"\nevents, the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#metric"}),Object(r.b)("inlineCode",{parentName:"a"},"metric"))," events are not emitted as a single array. They are emitted\nindividually, and the downstream components treat them as individual events.\nDownstream components are not aware they were derived from a single log event."),Object(r.b)("h3",{id:"null-fields"},"Null Fields"),Object(r.b)("p",null,"If the target log ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#field"}),Object(r.b)("inlineCode",{parentName:"a"},"field"))," contains a ",Object(r.b)("inlineCode",{parentName:"p"},"null")," value it will ignored, and a metric\nwill not be emitted."),Object(r.b)("h3",{id:"reducing"},"Reducing"),Object(r.b)("p",null,"It's important to understand that this transform does not reduce multiple logs\ninto a single metric. Instead, this transform converts logs into granular\nindividual metrics that can then be reduced at the edge. Where the reduction\nhappens depends on your metrics storage. For example, the\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/reference/sinks/prometheus/"}),Object(r.b)("inlineCode",{parentName:"a"},"prometheus")," sink")," will reduce logs in the sink itself\nfor the next scrape, while other metrics sinks will proceed to forward the\nindividual metrics for reduction in the metrics storage itself."))}h.isMDXComponent=!0},245:function(e,t,n){"use strict";var a=n(0),l=n.n(a);n(85);t.a=function({children:e,filters:t}){const[n,r]=Object(a.useState)(!1),[i,o]=Object(a.useState)(!1),[s,c]=Object(a.useState)(null);let m=Array.isArray(e)?e:[e],u=m.some(e=>e.props.common),b=m.some(e=>e.props.required),d=m;return n&&(d=d.filter(e=>e.props.common)),i&&(d=d.filter(e=>e.props.required)),s&&(d=d.filter(e=>e.props.name.toLowerCase().includes(s.toLowerCase()))),l.a.createElement("div",{className:"fields"},m.length>1&&!1!==t?l.a.createElement("div",{className:"filters"},l.a.createElement("span",{className:"result-count"},d.length," items"),l.a.createElement("div",{className:" search"},l.a.createElement("input",{type:"text",onChange:e=>c(e.currentTarget.value),placeholder:"\ud83d\udd0d Search..."})),l.a.createElement("div",{className:"checkboxes"},u&&l.a.createElement("label",{title:"Only show popular/common results"},l.a.createElement("input",{type:"checkbox",onChange:e=>r(e.currentTarget.checked),checked:n}),"common only"),b&&l.a.createElement("label",{title:"Only show required results"},l.a.createElement("input",{type:"checkbox",onChange:e=>o(e.currentTarget.checked),checked:i}),"required only"))):null,l.a.createElement("div",{className:"section-list"},!Array.isArray(d)||d.length>0?d:l.a.createElement("div",{className:"empty"},l.a.createElement("div",{className:"icon"},"\u2639"),l.a.createElement("div",null,"No fields found"))))}},246:function(e,t,n){"use strict";n(12);var a=n(0),l=n.n(a),r=n(241),i=n.n(r),o=(n(242),n(244)),s=n(251);function c(e){return JSON.stringify(e)}function m(e){return e.includes(".")?'"'+e+'"':e}function u(e,t){return(n=t)&&n.constructor===Object?"name"in t&&"value"in t?`${m(t.name)} = ${c(t.value)}`:`${m(Object.keys(t)[0])} = ${c(Object.values(t)[0])}`:e?`${e} = ${c(t)}`:`${c(t)}`;var n}function b({values:e}){let t=[];if(Array.isArray(e))for(var n in e){let a=e[n];t.push(l.a.createElement("code",{key:a},c(a))),t.push(" ")}else for(var a in e)t.push(l.a.createElement("code",{key:a,title:e[a]},c(a))),t.push(" ");return t}function d({name:e,path:t,value:n}){return l.a.createElement("code",null,u(null,n))}function p({name:e,path:t,values:n}){let a="";return n.forEach((function(t){a+=u(e,t)+"\n"})),t&&(a=`[${t}]\n${a}`),l.a.createElement("div",null,l.a.createElement(o.a,{fileName:"vector.toml"}),l.a.createElement(s.a,{className:"language-toml"},a))}function g({value:e}){let t=Object.keys(e)[0],n=Object.values(e)[0];return l.a.createElement("span",null,l.a.createElement("code",null,l.a.createElement("a",{href:`#${t}`},t))," = ",l.a.createElement("code",null,c(n)))}function h({defaultValue:e,enumValues:t,examples:n,name:r,path:i,relevantWhen:o}){const[s,c]=Object(a.useState)(!1);return e||t||n&&n.length>0?l.a.createElement("div",{className:"info"},void 0!==e?e?l.a.createElement("div",null,"Default: ",l.a.createElement(d,{name:r,path:i,value:e})):l.a.createElement("div",null,"No default"):null,t?l.a.createElement("div",null,"Enum, must be one of: ",l.a.createElement(b,{values:t})):null,o?l.a.createElement("div",null,"Only relevant when: ",l.a.createElement(g,{value:o})):null,l.a.createElement("div",null,l.a.createElement("div",{className:"show-more",onClick:()=>c(!s)},s?"Hide examples":"View examples"),s&&l.a.createElement("div",{className:"examples"},l.a.createElement(p,{name:r,path:i,values:n})))):null}t.a=function({children:e,common:t,defaultValue:n,enumValues:r,examples:o,name:s,path:c,relevantWhen:m,templateable:u,type:b,unit:d,required:p}){const[g,f]=Object(a.useState)(!1);let j=e;return g&&(j=j.filter(e=>"p"!=e.props.originalType)),l.a.createElement("div",{className:i()("field","section",p?"field-required":"",g?"field-collapsed":""),required:p},l.a.createElement("div",{className:"badges"},t&&l.a.createElement("span",{className:"badge badge--primary",title:"This is a popular that we recommend for getting started"},"common"),u&&l.a.createElement("span",{className:"badge badge--primary",title:"This option is dynamic and accepts the Vector template syntax"},"templateable"),l.a.createElement("span",{className:"badge badge--secondary"},b),r&&Object.keys(r).length>0&&l.a.createElement("span",{className:"badge badge--secondary",title:"This option is an enumation and only allows specific values"},"enum"),d&&l.a.createElement("span",{className:"badge badge--secondary"},d),p?l.a.createElement("span",{className:"badge badge--danger"},"required"):l.a.createElement("span",{className:"badge badge--secondary"},"optional")),j,!g&&l.a.createElement(h,{defaultValue:n,enumValues:r,examples:o,name:s,path:c,relevantWhen:m}))}},247:function(e,t,n){"use strict";var a=n(1),l=n(0),r=n.n(l),i=n(252),o=n(241),s=n.n(o),c=n(253),m=n.n(c);function u({block:e,centered:t,className:n,style:a,values:l,selectedValue:i,setSelectedValue:o}){return r.a.createElement("div",{className:t?"tabs--centered":""},r.a.createElement("ul",{className:s()("tabs",n,{"tabs--block":e}),style:a},l.map(({value:e,label:t})=>r.a.createElement("li",{className:s()("tab-item",{"tab-item--active":i===e}),key:e,onClick:()=>o(e)},t))))}function b({selectedValue:e,setSelectedValue:t,values:n}){return r.a.createElement(i.a,{className:"react-select-container",classNamePrefix:"react-select",options:n,isClearable:!1,placeholder:"Select a version...",value:n.find(t=>t.value==e),onChange:e=>t(e?e.value:null)})}t.a=function(e){const{block:t,centered:n,children:i,defaultValue:o,select:s,style:c,values:d,urlKey:p}=e,[g,h]=Object(l.useState)(o);return Object(l.useEffect)(()=>{if("undefined"!=typeof window&&window.location&&p){let e=m.a.parse(window.location.search);e[p]&&h(e[p])}},[]),r.a.createElement("div",null,d.length>1&&(s?r.a.createElement(b,Object(a.a)({selectedValue:g,setSelectedValue:h},e)):r.a.createElement(u,Object(a.a)({selectedValue:g,setSelectedValue:h},e))),r.a.createElement("div",{className:"margin-vert--md"},l.Children.toArray(i).filter(e=>e.props.value===g)[0]))}},248:function(e,t,n){"use strict";var a=n(0),l=n.n(a);t.a=function(e){return l.a.createElement("div",null,e.children)}}}]);