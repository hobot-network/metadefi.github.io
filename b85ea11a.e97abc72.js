(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{203:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return u})),n.d(t,"metadata",(function(){return b})),n.d(t,"rightToc",(function(){return m})),n.d(t,"default",(function(){return f}));var a=n(1),l=n(6),i=(n(0),n(242)),r=n(247),o=n(248),s=n(244),c=n(245),d=n(246),u={delivery_guarantee:"best_effort",description:"The Vector [`file`](#file) source ingests data through one or more local files and outputs `log` events.",event_types:["log"],issues_url:"https://github.com/timberio/vector/issues?q=is%3Aopen+is%3Aissue+label%3A%22source%3A+file%22",operating_systems:["linux","macos","windows"],sidebar_label:'file|["log"]',source_url:"https://github.com/timberio/vector/tree/master/src/sources/file.rs",status:"prod-ready",title:"File Source",unsupported_operating_systems:[]},b={id:"reference/sources/file",title:"File Source",description:"The Vector [`file`](#file) source ingests data through one or more local files and outputs `log` events.",source:"@site/docs/reference/sources/file.md",permalink:"/docs/reference/sources/file",editUrl:"https://github.com/brainrexapi/edit/master/docs/reference/sources/file.md",sidebar_label:'file|["log"]',sidebar:"docs",previous:{title:"Docker Source",permalink:"/docs/reference/sources/docker"},next:{title:"Journald Source",permalink:"/docs/reference/sources/journald"}},m=[{value:"Configuration",id:"configuration",children:[]},{value:"Options",id:"options",children:[{value:"data_dir",id:"data_dir",children:[]},{value:"exclude",id:"exclude",children:[]},{value:"file_key",id:"file_key",children:[]},{value:"fingerprinting",id:"fingerprinting",children:[]},{value:"glob_minimum_cooldown",id:"glob_minimum_cooldown",children:[]},{value:"host_key",id:"host_key",children:[]},{value:"ignore_older",id:"ignore_older",children:[]},{value:"include",id:"include",children:[]},{value:"max_line_bytes",id:"max_line_bytes",children:[]},{value:"max_read_bytes",id:"max_read_bytes",children:[]},{value:"message_start_indicator",id:"message_start_indicator",children:[]},{value:"multi_line_timeout",id:"multi_line_timeout",children:[]},{value:"oldest_first",id:"oldest_first",children:[]},{value:"start_at_beginning",id:"start_at_beginning",children:[]}]},{value:"Output",id:"output",children:[{value:"file",id:"file",children:[]},{value:"host",id:"host",children:[]},{value:"message",id:"message",children:[]},{value:"timestamp",id:"timestamp",children:[]}]},{value:"How It Works",id:"how-it-works",children:[{value:"Auto Discovery",id:"auto-discovery",children:[]},{value:"Checkpointing",id:"checkpointing",children:[]},{value:"Compressed Files",id:"compressed-files",children:[]},{value:"Context",id:"context",children:[]},{value:"Environment Variables",id:"environment-variables",children:[]},{value:"File Deletion",id:"file-deletion",children:[]},{value:"File Identification",id:"file-identification",children:[]},{value:"File Read Order",id:"file-read-order",children:[]},{value:"File Rotation",id:"file-rotation",children:[]},{value:"Globbing",id:"globbing",children:[]},{value:"Line Delimiters",id:"line-delimiters",children:[]},{value:"Read Position",id:"read-position",children:[]}]}],p={rightToc:m},h="wrapper";function f(e){var t=e.components,n=Object(l.a)(e,["components"]);return Object(i.b)(h,Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"The Vector ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#file"}),Object(i.b)("inlineCode",{parentName:"a"},"file"))," source ingests data through one or more local files and outputs ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/about/data-model/log/"}),Object(i.b)("inlineCode",{parentName:"a"},"log"))," events."),Object(i.b)("h2",{id:"configuration"},"Configuration"),Object(i.b)(r.a,{block:!0,defaultValue:"common",values:[{label:"Common",value:"common"},{label:"Advanced",value:"advanced"}],mdxType:"Tabs"},Object(i.b)(o.a,{value:"common",mdxType:"TabItem"},Object(i.b)(s.a,{fileName:"vector.toml",learnMoreUrl:"/docs/setup/configuration/",mdxType:"CodeHeader"}),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-toml"}),'[sources.my_source_id]\n  # REQUIRED - General\n  type = "file" # must be: "file"\n  include = ["/var/log/nginx/*.log"] # example\n\n  # OPTIONAL - General\n  glob_minimum_cooldown = 1000 # default, milliseconds\n  start_at_beginning = false # default\n  ignore_older = 86400 # example, no default, seconds\n\n  # OPTIONAL - Context\n  file_key = "file" # default\n  host_key = "host" # default\n\n  # OPTIONAL - Priority\n  oldest_first = false # default\n'))),Object(i.b)(o.a,{value:"advanced",mdxType:"TabItem"},Object(i.b)(s.a,{fileName:"vector.toml",learnMoreUrl:"/docs/setup/configuration/",mdxType:"CodeHeader"}),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-toml"}),'[sources.my_source_id]\n  # REQUIRED - General\n  type = "file" # must be: "file"\n  include = ["/var/log/nginx/*.log"] # example\n\n  # OPTIONAL - General\n  glob_minimum_cooldown = 1000 # default, milliseconds\n  start_at_beginning = false # default\n  data_dir = "/var/lib/vector" # example, no default\n  exclude = ["/var/log/nginx/*.[0-9]*.log"] # example, no default\n  ignore_older = 86400 # example, no default, seconds\n  max_line_bytes = 102400 # default, bytes\n\n  # OPTIONAL - Context\n  file_key = "file" # default\n  host_key = "host" # default\n\n  # OPTIONAL - Multi-line\n  message_start_indicator = "^(INFO|ERROR)" # example, no default\n  multi_line_timeout = 1000 # default, milliseconds\n\n  # OPTIONAL - Priority\n  max_read_bytes = 2048 # default, bytes\n  oldest_first = false # default\n\n  # OPTIONAL - Fingerprinting\n  [sources.my_source_id.fingerprinting]\n    fingerprint_bytes = 256 # default, bytes, relevant when strategy = "checksum"\n    ignored_header_bytes = 0 # default, bytes, relevant when strategy = "checksum"\n    strategy = "checksum" # default, enum\n')))),Object(i.b)("h2",{id:"options"},"Options"),Object(i.b)(c.a,{filters:!0,mdxType:"Fields"},Object(i.b)(d.a,{common:!1,defaultValue:null,enumValues:null,examples:["/var/lib/vector"],name:"data_dir",path:null,relevantWhen:null,required:!1,templateable:!1,type:"string",unit:null,mdxType:"Field"},Object(i.b)("h3",{id:"data_dir"},"data_dir"),Object(i.b)("p",null,"The directory used to persist file checkpoint positions. By default, the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/setup/configuration/#data_dir"}),"global [",Object(i.b)("inlineCode",{parentName:"a"},"data_dir"),"](#data_dir) option")," is used. Please make sure the Vector project has write permissions to this dir. See ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#checkpointing"}),"Checkpointing")," for more info.")),Object(i.b)(d.a,{common:!1,defaultValue:null,enumValues:null,examples:[["/var/log/nginx/*.[0-9]*.log"]],name:"exclude",path:null,relevantWhen:null,required:!1,templateable:!1,type:"[string]",unit:null,mdxType:"Field"},Object(i.b)("h3",{id:"exclude"},"exclude"),Object(i.b)("p",null,"Array of file patterns to exclude. ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#globbing"}),"Globbing")," is supported.",Object(i.b)("em",{parentName:"p"},"Takes precedence over the ",Object(i.b)("a",Object(a.a)({parentName:"em"},{href:"#include"}),Object(i.b)("inlineCode",{parentName:"a"},"include")," option"),"."))),Object(i.b)(d.a,{common:!0,defaultValue:"file",enumValues:null,examples:["file"],name:"file_key",path:null,relevantWhen:null,required:!0,templateable:!1,type:"string",unit:null,mdxType:"Field"},Object(i.b)("h3",{id:"file_key"},"file_key"),Object(i.b)("p",null,"The key name added to each event with the full path of the file. See ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#context"}),"Context")," for more info.")),Object(i.b)(d.a,{common:!1,defaultValue:null,enumValues:null,examples:[],name:"fingerprinting",path:null,relevantWhen:null,required:!1,templateable:!1,type:"table",unit:null,mdxType:"Field"},Object(i.b)("h3",{id:"fingerprinting"},"fingerprinting"),Object(i.b)("p",null,"Configuration for how the file source should identify files."),Object(i.b)(c.a,{filters:!1,mdxType:"Fields"},Object(i.b)(d.a,{common:!0,defaultValue:256,enumValues:null,examples:[256],name:"fingerprint_bytes",path:"fingerprinting",relevantWhen:{strategy:"checksum"},required:!0,templateable:!1,type:"int",unit:"bytes",mdxType:"Field"},Object(i.b)("h4",{id:"fingerprint_bytes"},"fingerprint_bytes"),Object(i.b)("p",null,"The number of bytes read off the head of the file to generate a unique fingerprint. See ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#file-identification"}),"File Identification")," for more info.")),Object(i.b)(d.a,{common:!0,defaultValue:0,enumValues:null,examples:[0],name:"ignored_header_bytes",path:"fingerprinting",relevantWhen:{strategy:"checksum"},required:!0,templateable:!1,type:"int",unit:"bytes",mdxType:"Field"},Object(i.b)("h4",{id:"ignored_header_bytes"},"ignored_header_bytes"),Object(i.b)("p",null,"The number of bytes to skip ahead (or ignore) when generating a unique fingerprint. This is helpful if all files share a common header. See ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#file-identification"}),"File Identification")," for more info.")),Object(i.b)(d.a,{common:!1,defaultValue:"checksum",enumValues:{checksum:"Read [`fingerprint_bytes`](#fingerprint_bytes) bytes from the head of the file to uniquely identify files via a checksum.",device_and_inode:"Uses the [device and inode][urls.inode] to unique identify files."},examples:["checksum","device_and_inode"],name:"strategy",path:"fingerprinting",relevantWhen:null,required:!1,templateable:!1,type:"string",unit:null,mdxType:"Field"},Object(i.b)("h4",{id:"strategy"},"strategy"),Object(i.b)("p",null,"The strategy used to uniquely identify files. This is important for ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#checkpointing"}),"checkpointing")," when file rotation is used.")))),Object(i.b)(d.a,{common:!0,defaultValue:1e3,enumValues:null,examples:[1e3],name:"glob_minimum_cooldown",path:null,relevantWhen:null,required:!0,templateable:!1,type:"int",unit:"milliseconds",mdxType:"Field"},Object(i.b)("h3",{id:"glob_minimum_cooldown"},"glob_minimum_cooldown"),Object(i.b)("p",null,"Delay between file discovery calls. This controls the interval at which Vector searches for files. See ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#auto-discovery"}),"Auto Discovery")," and ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#globbing"}),"Globbing")," for more info.")),Object(i.b)(d.a,{common:!0,defaultValue:"host",enumValues:null,examples:["host"],name:"host_key",path:null,relevantWhen:null,required:!0,templateable:!1,type:"string",unit:null,mdxType:"Field"},Object(i.b)("h3",{id:"host_key"},"host_key"),Object(i.b)("p",null,"The key name added to each event representing the current host. See ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#context"}),"Context")," for more info.")),Object(i.b)(d.a,{common:!0,defaultValue:null,enumValues:null,examples:[86400],name:"ignore_older",path:null,relevantWhen:null,required:!1,templateable:!1,type:"int",unit:"seconds",mdxType:"Field"},Object(i.b)("h3",{id:"ignore_older"},"ignore_older"),Object(i.b)("p",null,"Ignore files with a data modification date that does not exceed this age.")),Object(i.b)(d.a,{common:!0,defaultValue:null,enumValues:null,examples:[["/var/log/nginx/*.log"]],name:"include",path:null,relevantWhen:null,required:!0,templateable:!1,type:"[string]",unit:null,mdxType:"Field"},Object(i.b)("h3",{id:"include"},"include"),Object(i.b)("p",null,"Array of file patterns to include. ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#globbing"}),"Globbing")," is supported. See ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#file-read-order"}),"File Read Order")," and ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#file-rotation"}),"File Rotation")," for more info.")),Object(i.b)(d.a,{common:!1,defaultValue:102400,enumValues:null,examples:[102400],name:"max_line_bytes",path:null,relevantWhen:null,required:!1,templateable:!1,type:"int",unit:"bytes",mdxType:"Field"},Object(i.b)("h3",{id:"max_line_bytes"},"max_line_bytes"),Object(i.b)("p",null,"The maximum number of a bytes a line can contain before being discarded. This protects against malformed lines or tailing incorrect files.")),Object(i.b)(d.a,{common:!1,defaultValue:2048,enumValues:null,examples:[2048],name:"max_read_bytes",path:null,relevantWhen:null,required:!1,templateable:!1,type:"int",unit:"bytes",mdxType:"Field"},Object(i.b)("h3",{id:"max_read_bytes"},"max_read_bytes"),Object(i.b)("p",null,"An approximate limit on the amount of data read from a single file at a given time.")),Object(i.b)(d.a,{common:!1,defaultValue:null,enumValues:null,examples:["^(INFO|ERROR)"],name:"message_start_indicator",path:null,relevantWhen:null,required:!1,templateable:!1,type:"string",unit:null,mdxType:"Field"},Object(i.b)("h3",{id:"message_start_indicator"},"message_start_indicator"),Object(i.b)("p",null,"When present, Vector will aggregate multiple lines into a single event, using this pattern as the indicator that the previous lines should be flushed and a new event started. The pattern will be matched against entire lines as a regular expression, so remember to anchor as appropriate.")),Object(i.b)(d.a,{common:!1,defaultValue:1e3,enumValues:null,examples:[1e3],name:"multi_line_timeout",path:null,relevantWhen:null,required:!1,templateable:!1,type:"int",unit:"milliseconds",mdxType:"Field"},Object(i.b)("h3",{id:"multi_line_timeout"},"multi_line_timeout"),Object(i.b)("p",null,"When ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#message_start_indicator"}),Object(i.b)("inlineCode",{parentName:"a"},"message_start_indicator"))," is present, this sets the amount of time Vector will buffer lines into a single event before flushing, regardless of whether or not it has seen a line indicating the start of a new message.")),Object(i.b)(d.a,{common:!0,defaultValue:!1,enumValues:null,examples:[!1,!0],name:"oldest_first",path:null,relevantWhen:null,required:!1,templateable:!1,type:"bool",unit:null,mdxType:"Field"},Object(i.b)("h3",{id:"oldest_first"},"oldest_first"),Object(i.b)("p",null,"Instead of balancing read capacity fairly across all watched files, prioritize draining the oldest files before moving on to read data from younger files. See ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#file-read-order"}),"File Read Order")," for more info.")),Object(i.b)(d.a,{common:!0,defaultValue:!1,enumValues:null,examples:[!1,!0],name:"start_at_beginning",path:null,relevantWhen:null,required:!0,templateable:!1,type:"bool",unit:null,mdxType:"Field"},Object(i.b)("h3",{id:"start_at_beginning"},"start_at_beginning"),Object(i.b)("p",null,"For files with a stored checkpoint at startup, setting this option to ",Object(i.b)("inlineCode",{parentName:"p"},"true")," will tell Vector to read from the beginning of the file instead of the stored checkpoint.  See ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#read-position"}),"Read Position")," for more info."))),Object(i.b)("h2",{id:"output"},"Output"),Object(i.b)("p",null,"The ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#file"}),Object(i.b)("inlineCode",{parentName:"a"},"file"))," source ingests data through one or more local files and outputs ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/about/data-model/log/"}),Object(i.b)("inlineCode",{parentName:"a"},"log"))," events.\nFor example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'{\n  "file": "/var/log/nginx.log",\n  "host": "my.host.com",\n  "message": "Started GET / for 127.0.0.1 at 2012-03-10 14:28:14 +0100",\n  "timestamp": "2019-11-01T21:15:47+00:00"\n}\n')),Object(i.b)("p",null,"More detail on the output schema is below."),Object(i.b)(c.a,{filters:!0,mdxType:"Fields"},Object(i.b)(d.a,{defaultValue:null,enumValues:null,examples:["/var/log/nginx.log"],name:"file",path:null,required:!0,type:"string",mdxType:"Field"},Object(i.b)("h3",{id:"file"},"file"),Object(i.b)("p",null,"The ",Object(i.b)("em",{parentName:"p"},"full")," path of the file tha the log originated from. See ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#checkpointing"}),"Checkpointing")," and ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#context"}),"Context")," for more info.")),Object(i.b)(d.a,{defaultValue:null,enumValues:null,examples:["my.host.com"],name:"host",path:null,required:!0,type:"string",mdxType:"Field"},Object(i.b)("h3",{id:"host"},"host"),Object(i.b)("p",null,"The current hostname, equivalent to the ",Object(i.b)("inlineCode",{parentName:"p"},"gethostname")," command.")),Object(i.b)(d.a,{defaultValue:null,enumValues:null,examples:["Started GET / for 127.0.0.1 at 2012-03-10 14:28:14 +0100"],name:"message",path:null,required:!0,type:"string",mdxType:"Field"},Object(i.b)("h3",{id:"message"},"message"),Object(i.b)("p",null,"The raw log message, unaltered.")),Object(i.b)(d.a,{defaultValue:null,enumValues:null,examples:["2019-11-01T21:15:47+00:00"],name:"timestamp",path:null,required:!0,type:"timestamp",mdxType:"Field"},Object(i.b)("h3",{id:"timestamp"},"timestamp"),Object(i.b)("p",null,"The exact time the event was ingested."))),Object(i.b)("h2",{id:"how-it-works"},"How It Works"),Object(i.b)("h3",{id:"auto-discovery"},"Auto Discovery"),Object(i.b)("p",null,"Vector will continually look for new files matching any of your include\npatterns. The frequency is controlled via the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#glob_minimum_cooldown"}),Object(i.b)("inlineCode",{parentName:"a"},"glob_minimum_cooldown"))," option.\nIf a new file is added that matches any of the supplied patterns, Vector will\nbegin tailing it. Vector maintains a unique list of files and will not tail a\nfile more than once, even if it matches multiple patterns. You can read more\nabout how we identify files in the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#file-identification"}),"Identification"),"\nsection."),Object(i.b)("h3",{id:"checkpointing"},"Checkpointing"),Object(i.b)("p",null,"Vector checkpoints the current read position in the file after each successful\nread. This ensures that Vector resumes where it left off if restarted,\npreventing data from being read twice. The checkpoint positions are stored in\nthe data directory which is specified via the\n",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/setup/configuration/#data-directory"}),"global [",Object(i.b)("inlineCode",{parentName:"a"},"data_dir"),"](#data_dir) option")," but can be\noverridden via the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#data_dir"}),Object(i.b)("inlineCode",{parentName:"a"},"data_dir"))," option in the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#file"}),Object(i.b)("inlineCode",{parentName:"a"},"file"))," sink directly."),Object(i.b)("h3",{id:"compressed-files"},"Compressed Files"),Object(i.b)("p",null,"Vector will transparently detect files which have been compressed using ",Object(i.b)("inlineCode",{parentName:"p"},"gzip"),"\nand decompress them for reading. This detection process looks for the unique\nsequence of bytes in the ",Object(i.b)("inlineCode",{parentName:"p"},"gzip")," header and does not rely on the compressed files\nadhering to any kind of naming convention."),Object(i.b)("p",null,"One caveat with reading compressed files is that Vector is not able to\nefficiently seek into them. Rather than implement a potentially-expensive full\nscan as a seek mechanism, Vector currently will not attempt to make further\nreads from a file for which it has already stored a checkpoint in a previous\nrun. For this reason, users should take care to allow Vector to fully process\nany compressed files before shutting the process down or moving the files to\nanother location on disk."),Object(i.b)("h3",{id:"context"},"Context"),Object(i.b)("p",null,"By default, the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#file"}),Object(i.b)("inlineCode",{parentName:"a"},"file"))," source will add context\nkeys to your events via the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#file_key"}),Object(i.b)("inlineCode",{parentName:"a"},"file_key"))," and ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#host_key"}),Object(i.b)("inlineCode",{parentName:"a"},"host_key")),"\noptions."),Object(i.b)("h3",{id:"environment-variables"},"Environment Variables"),Object(i.b)("p",null,"Environment variables are supported through all of Vector's configuration.\nSimply add ",Object(i.b)("inlineCode",{parentName:"p"},"${MY_ENV_VAR}")," in your Vector configuration file and the variable\nwill be replaced before being evaluated."),Object(i.b)("p",null,"You can learn more in the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/setup/configuration/#environment-variables"}),"Environment Variables"),"\nsection."),Object(i.b)("h3",{id:"file-deletion"},"File Deletion"),Object(i.b)("p",null,"When a watched file is deleted, Vector will maintain its open file handle and\ncontinue reading until it reaches EOF. When a file is no longer findable in the\n",Object(i.b)("inlineCode",{parentName:"p"},"includes")," glob and the reader has reached EOF, that file's reader is discarded."),Object(i.b)("h3",{id:"file-identification"},"File Identification"),Object(i.b)("p",null,"By default, Vector identifies files by creating a ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Cyclic_redundancy_check"}),"cyclic redundancy check\n(CRC)")," on the first 256 bytes of the file. This serves as a\nfingerprint to uniquely identify the file. The amount of bytes read can be\ncontrolled via the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#fingerprint_bytes"}),Object(i.b)("inlineCode",{parentName:"a"},"fingerprint_bytes"))," and ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#ignored_header_bytes"}),Object(i.b)("inlineCode",{parentName:"a"},"ignored_header_bytes"))," options."),Object(i.b)("p",null,"This strategy avoids the common pitfalls of using device and inode names since\ninode names can be reused across files. This enables Vector to ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/#correctness"}),"properly tail\nfiles across various rotation strategies"),"."),Object(i.b)("h3",{id:"file-read-order"},"File Read Order"),Object(i.b)("p",null,"By default, Vector attempts to allocate its read bandwidth fairly across all of\nthe files it's currently watching. This prevents a single very busy file from\nstarving other independent files from being read. In certain situations,\nhowever, this can lead to interleaved reads from files that should be read one\nafter the other."),Object(i.b)("p",null,"For example, consider a service that logs to timestamped file, creating\na new one at an interval and leaving the old one as-is. Under normal operation,\nVector would follow writes as they happen to each file and there would be no\ninterleaving. In an overload situation, however, Vector may pick up and begin\ntailing newer files before catching up to the latest writes from older files.\nThis would cause writes from a single logical log stream to be interleaved in\ntime and potentially slow down ingestion as a whole, since the fixed total read\nbandwidth is allocated across an increasing number of files."),Object(i.b)("p",null,"To address this type of situation, Vector provides the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#oldest_first"}),Object(i.b)("inlineCode",{parentName:"a"},"oldest_first"))," flag. When\nset, Vector will not read from any file younger than the oldest file that it\nhasn't yet caught up to. In other words, Vector will continue reading from older\nfiles as long as there is more data to read. Only once it hits the end will it\nthen move on to read from younger files."),Object(i.b)("p",null,"Whether or not to use the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#oldest_first"}),Object(i.b)("inlineCode",{parentName:"a"},"oldest_first"))," flag depends on the organization of the\nlogs you're configuring Vector to tail. If your ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#include"}),Object(i.b)("inlineCode",{parentName:"a"},"include"))," glob contains multiple\nindependent logical log streams (e.g. nginx's ",Object(i.b)("inlineCode",{parentName:"p"},"access.log")," and ",Object(i.b)("inlineCode",{parentName:"p"},"error.log"),", or\nlogs from multiple services), you are likely better off with the default\nbehavior. If you're dealing with a single logical log stream or if you value\nper-stream ordering over fairness across streams, consider setting\n",Object(i.b)("inlineCode",{parentName:"p"},"oldest_first")," to ",Object(i.b)("inlineCode",{parentName:"p"},"true"),"."),Object(i.b)("h3",{id:"file-rotation"},"File Rotation"),Object(i.b)("p",null,"Vector supports tailing across a number of file rotation strategies. The default\nbehavior of ",Object(i.b)("inlineCode",{parentName:"p"},"logrotate")," is simply to move the old log file and create a new one.\nThis requires no special configuration of Vector, as it will maintain its open\nfile handle to the rotated log until it has finished reading and it will find\nthe newly created file normally."),Object(i.b)("p",null,"A popular alternative strategy is ",Object(i.b)("inlineCode",{parentName:"p"},"copytruncate"),", in which ",Object(i.b)("inlineCode",{parentName:"p"},"logrotate")," will copy\nthe old log file to a new location before truncating the original. Vector will\nalso handle this well out of the box, but there are a couple configuration options\nthat will help reduce the very small chance of missed data in some edge cases.\nWe recommend a combination of ",Object(i.b)("inlineCode",{parentName:"p"},"delaycompress")," (if applicable) on the logrotate\nside and including the first rotated file in Vector's ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#include"}),Object(i.b)("inlineCode",{parentName:"a"},"include"))," option. This\nallows Vector to find the file after rotation, read it uncompressed to identify\nit, and then ensure it has all of the data, including any written in a gap\nbetween Vector's last read and the actual rotation event."),Object(i.b)("h3",{id:"globbing"},"Globbing"),Object(i.b)("p",null,Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Glob_(programming)"}),"Globbing")," is supported in all provided file paths, files will\nbe ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#auto-discovery"}),"autodiscovered")," continually at a rate defined by the\n",Object(i.b)("inlineCode",{parentName:"p"},"glob_minimum_cooldown")," option."),Object(i.b)("h3",{id:"line-delimiters"},"Line Delimiters"),Object(i.b)("p",null,"Each line is read until a new line delimiter (the ",Object(i.b)("inlineCode",{parentName:"p"},"0xA")," byte) or ",Object(i.b)("inlineCode",{parentName:"p"},"EOF")," is found."),Object(i.b)("h3",{id:"read-position"},"Read Position"),Object(i.b)("p",null,"By default, Vector will read new data only for newly discovered files, similar\nto the ",Object(i.b)("inlineCode",{parentName:"p"},"tail")," command. You can read from the beginning of the file by setting\nthe ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#start_at_beginning"}),Object(i.b)("inlineCode",{parentName:"a"},"start_at_beginning"))," option to ",Object(i.b)("inlineCode",{parentName:"p"},"true"),"."),Object(i.b)("p",null,"Previously discovered files will be ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#checkpointing"}),"checkpointed"),", and the\nread position will resume from the last checkpoint."))}f.isMDXComponent=!0},245:function(e,t,n){"use strict";var a=n(0),l=n.n(a);n(85);t.a=function({children:e,filters:t}){const[n,i]=Object(a.useState)(!1),[r,o]=Object(a.useState)(!1),[s,c]=Object(a.useState)(null);let d=Array.isArray(e)?e:[e],u=d.some(e=>e.props.common),b=d.some(e=>e.props.required),m=d;return n&&(m=m.filter(e=>e.props.common)),r&&(m=m.filter(e=>e.props.required)),s&&(m=m.filter(e=>e.props.name.toLowerCase().includes(s.toLowerCase()))),l.a.createElement("div",{className:"fields"},d.length>1&&!1!==t?l.a.createElement("div",{className:"filters"},l.a.createElement("span",{className:"result-count"},m.length," items"),l.a.createElement("div",{className:" search"},l.a.createElement("input",{type:"text",onChange:e=>c(e.currentTarget.value),placeholder:"\ud83d\udd0d Search..."})),l.a.createElement("div",{className:"checkboxes"},u&&l.a.createElement("label",{title:"Only show popular/common results"},l.a.createElement("input",{type:"checkbox",onChange:e=>i(e.currentTarget.checked),checked:n}),"common only"),b&&l.a.createElement("label",{title:"Only show required results"},l.a.createElement("input",{type:"checkbox",onChange:e=>o(e.currentTarget.checked),checked:r}),"required only"))):null,l.a.createElement("div",{className:"section-list"},!Array.isArray(m)||m.length>0?m:l.a.createElement("div",{className:"empty"},l.a.createElement("div",{className:"icon"},"\u2639"),l.a.createElement("div",null,"No fields found"))))}},246:function(e,t,n){"use strict";n(12);var a=n(0),l=n.n(a),i=n(241),r=n.n(i),o=(n(242),n(244)),s=n(251);function c(e){return JSON.stringify(e)}function d(e){return e.includes(".")?'"'+e+'"':e}function u(e,t){return(n=t)&&n.constructor===Object?"name"in t&&"value"in t?`${d(t.name)} = ${c(t.value)}`:`${d(Object.keys(t)[0])} = ${c(Object.values(t)[0])}`:e?`${e} = ${c(t)}`:`${c(t)}`;var n}function b({values:e}){let t=[];if(Array.isArray(e))for(var n in e){let a=e[n];t.push(l.a.createElement("code",{key:a},c(a))),t.push(" ")}else for(var a in e)t.push(l.a.createElement("code",{key:a,title:e[a]},c(a))),t.push(" ");return t}function m({name:e,path:t,value:n}){return l.a.createElement("code",null,u(null,n))}function p({name:e,path:t,values:n}){let a="";return n.forEach((function(t){a+=u(e,t)+"\n"})),t&&(a=`[${t}]\n${a}`),l.a.createElement("div",null,l.a.createElement(o.a,{fileName:"vector.toml"}),l.a.createElement(s.a,{className:"language-toml"},a))}function h({value:e}){let t=Object.keys(e)[0],n=Object.values(e)[0];return l.a.createElement("span",null,l.a.createElement("code",null,l.a.createElement("a",{href:`#${t}`},t))," = ",l.a.createElement("code",null,c(n)))}function f({defaultValue:e,enumValues:t,examples:n,name:i,path:r,relevantWhen:o}){const[s,c]=Object(a.useState)(!1);return e||t||n&&n.length>0?l.a.createElement("div",{className:"info"},void 0!==e?e?l.a.createElement("div",null,"Default: ",l.a.createElement(m,{name:i,path:r,value:e})):l.a.createElement("div",null,"No default"):null,t?l.a.createElement("div",null,"Enum, must be one of: ",l.a.createElement(b,{values:t})):null,o?l.a.createElement("div",null,"Only relevant when: ",l.a.createElement(h,{value:o})):null,l.a.createElement("div",null,l.a.createElement("div",{className:"show-more",onClick:()=>c(!s)},s?"Hide examples":"View examples"),s&&l.a.createElement("div",{className:"examples"},l.a.createElement(p,{name:i,path:r,values:n})))):null}t.a=function({children:e,common:t,defaultValue:n,enumValues:i,examples:o,name:s,path:c,relevantWhen:d,templateable:u,type:b,unit:m,required:p}){const[h,g]=Object(a.useState)(!1);let O=e;return h&&(O=O.filter(e=>"p"!=e.props.originalType)),l.a.createElement("div",{className:r()("field","section",p?"field-required":"",h?"field-collapsed":""),required:p},l.a.createElement("div",{className:"badges"},t&&l.a.createElement("span",{className:"badge badge--primary",title:"This is a popular that we recommend for getting started"},"common"),u&&l.a.createElement("span",{className:"badge badge--primary",title:"This option is dynamic and accepts the Vector template syntax"},"templateable"),l.a.createElement("span",{className:"badge badge--secondary"},b),i&&Object.keys(i).length>0&&l.a.createElement("span",{className:"badge badge--secondary",title:"This option is an enumation and only allows specific values"},"enum"),m&&l.a.createElement("span",{className:"badge badge--secondary"},m),p?l.a.createElement("span",{className:"badge badge--danger"},"required"):l.a.createElement("span",{className:"badge badge--secondary"},"optional")),O,!h&&l.a.createElement(f,{defaultValue:n,enumValues:i,examples:o,name:s,path:c,relevantWhen:d}))}},247:function(e,t,n){"use strict";var a=n(1),l=n(0),i=n.n(l),r=n(252),o=n(241),s=n.n(o),c=n(253),d=n.n(c);function u({block:e,centered:t,className:n,style:a,values:l,selectedValue:r,setSelectedValue:o}){return i.a.createElement("div",{className:t?"tabs--centered":""},i.a.createElement("ul",{className:s()("tabs",n,{"tabs--block":e}),style:a},l.map(({value:e,label:t})=>i.a.createElement("li",{className:s()("tab-item",{"tab-item--active":r===e}),key:e,onClick:()=>o(e)},t))))}function b({selectedValue:e,setSelectedValue:t,values:n}){return i.a.createElement(r.a,{className:"react-select-container",classNamePrefix:"react-select",options:n,isClearable:!1,placeholder:"Select a version...",value:n.find(t=>t.value==e),onChange:e=>t(e?e.value:null)})}t.a=function(e){const{block:t,centered:n,children:r,defaultValue:o,select:s,style:c,values:m,urlKey:p}=e,[h,f]=Object(l.useState)(o);return Object(l.useEffect)(()=>{if("undefined"!=typeof window&&window.location&&p){let e=d.a.parse(window.location.search);e[p]&&f(e[p])}},[]),i.a.createElement("div",null,m.length>1&&(s?i.a.createElement(b,Object(a.a)({selectedValue:h,setSelectedValue:f},e)):i.a.createElement(u,Object(a.a)({selectedValue:h,setSelectedValue:f},e))),i.a.createElement("div",{className:"margin-vert--md"},l.Children.toArray(r).filter(e=>e.props.value===h)[0]))}},248:function(e,t,n){"use strict";var a=n(0),l=n.n(a);t.a=function(e){return l.a.createElement("div",null,e.children)}}}]);