(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{173:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return d})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return b}));var o=n(1),a=n(6),r=(n(0),n(242)),i=n(254),s=n.n(i),c={title:"Vector as an Agent",sidebar_label:"Agent",description:"Deploying and running Vector as an agent"},d={id:"setup/deployment/roles/agent",title:"Vector as an Agent",description:"Deploying and running Vector as an agent",source:"@site/docs/setup/deployment/roles/agent.md",permalink:"/docs/setup/deployment/roles/agent",editUrl:"https://github.com/brainrexapi/edit/master/docs/setup/deployment/roles/agent.md",sidebar_label:"Agent",sidebar:"docs",previous:{title:"Vector Deployment Roles",permalink:"/docs/setup/deployment/roles"},next:{title:"Vector as a Service",permalink:"/docs/setup/deployment/roles/service"}},l=[{value:"Vector Configuration",id:"vector-configuration",children:[{value:"Collecting Data",id:"collecting-data",children:[]},{value:"Sending Data",id:"sending-data",children:[]}]},{value:"System Configuration",id:"system-configuration",children:[{value:"Limiting Resources",id:"limiting-resources",children:[]}]},{value:"Administration",id:"administration",children:[{value:"Configuration Changes",id:"configuration-changes",children:[]},{value:"Updating Vector",id:"updating-vector",children:[]}]}],u={rightToc:l},m="wrapper";function b(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(r.b)(m,Object(o.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)(s.a,{src:"/img/roles-agent.svg",mdxType:"SVG"}),Object(r.b)("p",null,"When Vector serves as an agent, its purpose is to efficiently and quietly\ncollect data. In this scenario, Vector is typically sharing a host with a more\nimportant service. Therefore, it is critically important that Vector is a good\ncitizen, limiting its resource usage and efficiently forwarding data."),Object(r.b)("h2",{id:"vector-configuration"},"Vector Configuration"),Object(r.b)("h3",{id:"collecting-data"},"Collecting Data"),Object(r.b)("h4",{id:"in-a-container-context"},"In a container context"),Object(r.b)("p",null,"If you're deploying Vector in a ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/setup/installation/containers/"}),"container context"),", such as\n",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/setup/installation/containers/docker/"}),"Docker"),", then data collection is handled for you as\npart of installation, please proceed to the next section."),Object(r.b)("h4",{id:"not-in-a-container-context"},"Not in a container context"),Object(r.b)("p",null,"If you are not deploying Vector in a container context, then data collection\nmust be achieved through more generic means, such as ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"https://www.freedesktop.org/software/systemd/man/systemd-journald.service.html"}),"journald"),",\na ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/reference/sources/file/"}),"file"),", or ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/reference/sources/stdin/"}),"stdin"),". The method you use\ndepends on your setup. In general, we recommend avoiding stdin unless reducing\ndisk usage is top priority. Stdin is limiting, in that it is coupled with a\nsingle input stream, meaning you cannot restart Vector independently, and you\ncannot accept data from multiple streams at the same time. This makes it more\ndifficult to manage."),Object(r.b)("h3",{id:"sending-data"},"Sending Data"),Object(r.b)("h4",{id:"forwarding-to-a-downstream-vector-service"},"Forwarding to a downstream Vector service"),Object(r.b)("p",null,"If you're forwarding data to a downstream ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/setup/deployment/roles/service/"}),"Vector service"),",\nthen you should use the ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/reference/sinks/vector/"}),Object(r.b)("inlineCode",{parentName:"a"},"vector")," sink"),". The downstream\nVector service should use the ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/reference/sources/vector/"}),Object(r.b)("inlineCode",{parentName:"a"},"vector")," source"),". This\nhandles communication between Vector instances."),Object(r.b)("h4",{id:"not-forwarding-to-a-downstream-vector-service"},"Not forwarding to a downstream Vector service"),Object(r.b)("p",null,"If you are not forwarding data to a downstream Vector service then you can\nchoose ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/reference/sinks/"}),"any sink you'd like"),", but be cognizant of how many sinks\nyou're using, as more sinks usually means more resource usage. If you find\nthat Vector is hogging resources, then you should provision additional\nresources, or consider a ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/setup/deployment/topologies/#centralized"}),"centralized")," or\n",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/setup/deployment/topologies/#stream-based"}),"stream-based")," topology to push resource usage\ndownstream."),Object(r.b)("h4",{id:"hybrid-forwarding"},"Hybrid forwarding"),Object(r.b)("p",null,"There is nothing that prevents you from sending data to both a downstream\nVector service and another independent service. Often times this makes the\nmost sense if the downstream service is designed for streaming, as it takes\nload off of the downstream Vector service. For example, you might want to take\nadvantage of ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"https://cloud.google.com/bigquery/streaming-data-into-bigquery"}),"Big Query's streaming inserts"),". This\nfeature is designed for rapid streaming and it has the added benefit of making\ndata quickly available for querying. To implement this, you can forgo using a\ncentralized Vector service entirely and stream data directly from your client\nnodes."),Object(r.b)("h2",{id:"system-configuration"},"System Configuration"),Object(r.b)("h3",{id:"limiting-resources"},"Limiting Resources"),Object(r.b)("p",null,"Vector is designed to be ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"/#performance"}),Object(r.b)("em",{parentName:"a"},"highly")," efficient"),", but this does\nnot preclude Vector from consuming an excess amount of resources in certain\nscenarios. This is not ideal as an agent where priority should be given to the\nprimary service on the host. Therefore, it is recommended to limit Vector\nresource usage. We strongly believe resource limiting should be achieved at\nhigher levels, and depending on your platform this can be achieved through a\nvariety of means. For example:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(o.a)({parentName:"li"},{href:"https://www.freedesktop.org/software/systemd/man/systemd.resource-control.html"}),"Limiting resources with Systemd")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(o.a)({parentName:"li"},{href:"https://the.binbashtheory.com/control-resources-cgroups/"}),"Limiting resources with cgroups")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(o.a)({parentName:"li"},{href:"https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/"}),"Limiting resources with Kubernetes"))),Object(r.b)("p",null,"If none of the above links are relevant, please refer to your platform's\ndocumentation on limiting resources."),Object(r.b)("h4",{id:"resource-limit-recommendations"},"Resource limit recommendations"),Object(r.b)("p",null,"In general, we recommend the following ",Object(r.b)("em",{parentName:"p"},"minimum")," limitations:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"At least 5% CPU"),Object(r.b)("li",{parentName:"ul"},"At least 256mb of memory")),Object(r.b)("p",null,"A good resource manager will allow Vector to use more CPU and memory when\navailable. You should not have to provide any additional limitations."),Object(r.b)("h2",{id:"administration"},"Administration"),Object(r.b)("h3",{id:"configuration-changes"},"Configuration Changes"),Object(r.b)("p",null,"Vector can be ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/administration/process-management/#reloading"}),"reloaded")," to apply configuration changes.\nThis is the recommended strategy and should be used instead of restarting\nwhenever possible."),Object(r.b)("h3",{id:"updating-vector"},"Updating Vector"),Object(r.b)("p",null,"To ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/administration/updating/"}),"update")," Vector you'll need to restart the process. This\nis why we recommend using sources that use the disk as a buffer, as it decouples\nthe Vector process from the source process. This allows other processes to\ncontinue running while Vector restarts. When Vector is restarted, it can resume\nwhere it left off."))}b.isMDXComponent=!0}}]);