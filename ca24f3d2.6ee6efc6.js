(window.webpackJsonp=window.webpackJsonp||[]).push([[112],{213:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return c})),a.d(t,"rightToc",(function(){return d})),a.d(t,"default",(function(){return m}));var o=a(1),s=a(6),r=(a(0),a(242)),i=a(254),n=a.n(i),l={title:"Topologies",description:"Example topologies for Vector"},c={id:"setup/deployment/topologies",title:"Topologies",description:"Example topologies for Vector",source:"@site/docs/setup/deployment/topologies.md",permalink:"/docs/setup/deployment/topologies",editUrl:"https://github.com/brainrexapi/edit/master/docs/setup/deployment/topologies.md",sidebar:"docs",previous:{title:"Vector as a Service",permalink:"/docs/setup/deployment/roles/service"},next:{title:"Guides",permalink:"/docs/setup/guides"}},d=[{value:"Distributed",id:"distributed",children:[]},{value:"Centralized",id:"centralized",children:[]},{value:"Stream-Based",id:"stream-based",children:[]}],b={rightToc:d},p="wrapper";function m(e){var t=e.components,a=Object(s.a)(e,["components"]);return Object(r.b)(p,Object(o.a)({},b,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Vector can be deployed to form a variety of topologies. This section showcases common examples; use these as ",Object(r.b)("em",{parentName:"p"},"guidelines")," to build your own. Once you have a general understanding of your own topology you should progress to the ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/setup/deployment/roles/"}),"roles section"),", where you'll get a closer look at each role Vector serves to form your topology."),Object(r.b)("h2",{id:"distributed"},"Distributed"),Object(r.b)(n.a,{src:"/img/topologies-distributed.svg",mdxType:"SVG"}),Object(r.b)("p",null,"The simplest topology. This topology offers direct communication with your downstream services from your client nodes."),Object(r.b)("h4",{id:"pros"},"Pros"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Simple.")," Less moving parts."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Elastic.")," Easily scales with your app. Resources grow as you scale.")),Object(r.b)("h4",{id:"cons"},"Cons"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Less efficient.")," Depending on the complexity of your pipelines, this will use more local resources, which could disrupt the performance of other applications on the same host."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Less durable.")," Because data is buffered on the host it is more likely you'll lose buffered data in the event of an unrecoverable crash. Often times this is the most important and useful data."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"More downstream stress.")," Downstream services will receive more requests with smaller payloads that could potentially disrupt stability of these services."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Reduced downstream stability.")," You risk overloading downstream services if you need to scale up quickly or exceed the capacity a downstream service can handle."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Lacks multi-host context.")," Lacks awareness of other hosts and eliminates the ability to perform operations across hosts, such as reducing logs to global metrics. This is typically a concern for very large deployments where individual host metrics are less useful.")),Object(r.b)("h2",{id:"centralized"},"Centralized"),Object(r.b)(n.a,{src:"/img/topologies-centralized.svg",mdxType:"SVG"}),Object(r.b)("p",null,"A good balance of simplicity, stability, and control. For most, this topology is a good compromise between the ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"#distributed"}),"distributed")," and ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"#stream-based"}),"stream-based")," topologies. It offers many of the advantages of the stream-based topology without the management overhead and cost of running a Kafka cluster."),Object(r.b)("h4",{id:"pros-1"},"Pros"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"More efficient.")," More efficient for client nodes and downstream services. Vector agents are doing less which means they're using less resources. In addition, the centralized Vector service will buffer more data, achieve better compression, and send optimized requests downstream."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"More reliable.")," Vector will protect downstream services from volume spikes, buffering and flushing data at smoothed out intervals."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Has multi-host context.")," Because your data is centralized, you'll be able to perform operations across hosts, such as reducing logs to global metrics. This is advantageous for large deployments where individual host metrics are not interesting.")),Object(r.b)("h4",{id:"cons-1"},"Cons"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"More complex.")," There are more moving parts."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Less durable.")," Agent nodes are designed to get data off of the machine as quickly as possible, and this offers higher potential for data loss since the central Vector service could die and lose buffered data. If this type of outage is unacceptable, then we recommend the ",Object(r.b)("a",Object(o.a)({parentName:"li"},{href:"#stream-based"}),"stream-based topology")," below.")),Object(r.b)("h2",{id:"stream-based"},"Stream-Based"),Object(r.b)(n.a,{src:"/img/topologies-stream-based.svg",mdxType:"SVG"}),Object(r.b)("p",null,"The most durable and elastic topology. This topology is typically adopted for very large streams with teams that are familiar with running a stream-based service such as Kafka."),Object(r.b)("h4",{id:"pros-2"},"Pros"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Most durable & reliable.")," Stream services, like Kafka, are designed for high durability and reliability, replicating data across multiple nodes."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Most efficient.")," Vector agents are doing less, making them more efficient, and Vector services do not have to worry about durability, which can be tuned towards performance."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Ability to restream.")," Restream your data depending on your stream's retention period."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Cleaner separation of responsibilities.")," Vector is used solely as a routing layer and is not responsible for durability. Durability is delegated to a purpose-built service that you can switch and evolve over time.")),Object(r.b)("h4",{id:"cons-2"},"Cons"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Increased management overhead.")," Managing a stream service, such as Kafka, is a complex endeavor and generally requires an experienced team to setup and manage properly."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"More complex.")," This topology is complex and requires a deeper understand of managing production-grade streams."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"More expensive.")," In addition the management cost, the added stream cluster will require more resources which will increase operational cost.")))}m.isMDXComponent=!0}}]);