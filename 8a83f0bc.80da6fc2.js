(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{184:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return b})),a.d(t,"rightToc",(function(){return p})),a.d(t,"default",(function(){return u}));var n=a(1),r=a(6),l=(a(0),a(242)),i=a(244),s=a(245),c=a(246),o={description:"The Vector `regex_parser` transform accepts `log` events and allows you to parse a log field's value with a Regular Expression.",event_types:["log"],issues_url:"https://github.com/timberio/vector/issues?q=is%3Aopen+is%3Aissue+label%3A%22transform%3A+regex_parser%22",sidebar_label:'regex_parser|["log"]',source_url:"https://github.com/timberio/vector/tree/master/src/transforms/regex_parser.rs",status:"prod-ready",title:"Regex Parser Transform"},b={id:"reference/transforms/regex_parser",title:"Regex Parser Transform",description:"The Vector `regex_parser` transform accepts `log` events and allows you to parse a log field's value with a Regular Expression.",source:"@site/docs/reference/transforms/regex_parser.md",permalink:"/docs/reference/transforms/regex_parser",editUrl:"https://github.com/brainrexapi/edit/master/docs/reference/transforms/regex_parser.md",sidebar_label:'regex_parser|["log"]',sidebar:"docs",previous:{title:"LUA Transform",permalink:"/docs/reference/transforms/lua"},next:{title:"Remove Fields Transform",permalink:"/docs/reference/transforms/remove_fields"}},p=[{value:"Configuration",id:"configuration",children:[]},{value:"Options",id:"options",children:[{value:"drop_field",id:"drop_field",children:[]},{value:"field",id:"field",children:[]},{value:"regex",id:"regex",children:[]},{value:"types",id:"types",children:[]}]},{value:"Output",id:"output",children:[]},{value:"How It Works",id:"how-it-works",children:[{value:"Environment Variables",id:"environment-variables",children:[]},{value:"Failed Parsing",id:"failed-parsing",children:[]},{value:"Performance",id:"performance",children:[]},{value:"Regex Debugger",id:"regex-debugger",children:[]},{value:"Regex Syntax",id:"regex-syntax",children:[]}]}],m={rightToc:p},d="wrapper";function u(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(l.b)(d,Object(n.a)({},m,a,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"The Vector ",Object(l.b)("inlineCode",{parentName:"p"},"regex_parser")," transform accepts ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/about/data-model/log/"}),Object(l.b)("inlineCode",{parentName:"a"},"log"))," events and allows you to parse a log field's value with a ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Regular_expression"}),"Regular Expression"),"."),Object(l.b)("h2",{id:"configuration"},"Configuration"),Object(l.b)(i.a,{fileName:"vector.toml",learnMoreUrl:"/docs/setup/configuration/",mdxType:"CodeHeader"}),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-toml"}),'[transforms.my_transform_id]\n  # REQUIRED - General\n  type = "regex_parser" # must be: "regex_parser"\n  inputs = ["my-source-id"] # example\n  regex = "^(?P<timestamp>[\\\\w\\\\-:\\\\+]+) (?P<level>\\\\w+) (?P<message>.*)$" # example\n\n  # OPTIONAL - General\n  drop_field = true # default\n  field = "message" # default\n\n  # OPTIONAL - Types\n  [transforms.my_transform_id.types]\n')),Object(l.b)("h2",{id:"options"},"Options"),Object(l.b)(s.a,{filters:!0,mdxType:"Fields"},Object(l.b)(c.a,{common:!0,defaultValue:!0,enumValues:null,examples:[!0,!1],name:"drop_field",path:null,relevantWhen:null,required:!0,templateable:!1,type:"bool",unit:null,mdxType:"Field"},Object(l.b)("h3",{id:"drop_field"},"drop_field"),Object(l.b)("p",null,"If the specified ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"#field"}),Object(l.b)("inlineCode",{parentName:"a"},"field"))," should be dropped (removed) after parsing.")),Object(l.b)(c.a,{common:!0,defaultValue:"message",enumValues:null,examples:["message"],name:"field",path:null,relevantWhen:null,required:!0,templateable:!1,type:"string",unit:null,mdxType:"Field"},Object(l.b)("h3",{id:"field"},"field"),Object(l.b)("p",null,"The log field to parse. See ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"#failed-parsing"}),"Failed Parsing")," for more info.")),Object(l.b)(c.a,{common:!0,defaultValue:null,enumValues:null,examples:["^(?P<timestamp>[\\w\\-:\\+]+) (?P<level>\\w+) (?P<message>.*)$"],name:"regex",path:null,relevantWhen:null,required:!0,templateable:!1,type:"string",unit:null,mdxType:"Field"},Object(l.b)("h3",{id:"regex"},"regex"),Object(l.b)("p",null,"The Regular Expression to apply. Do not include the leading or trailing ",Object(l.b)("inlineCode",{parentName:"p"},"/"),". See ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"#failed-parsing"}),"Failed Parsing")," and ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"#regex-debugger"}),"Regex Debugger")," for more info.")),Object(l.b)(c.a,{common:!0,defaultValue:null,enumValues:null,examples:[],name:"types",path:null,relevantWhen:null,required:!1,templateable:!1,type:"table",unit:null,mdxType:"Field"},Object(l.b)("h3",{id:"types"},"types"),Object(l.b)("p",null,"Key/Value pairs representing mapped log field types. See ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"#regex-syntax"}),"Regex Syntax")," for more info."),Object(l.b)(s.a,{filters:!1,mdxType:"Fields"},Object(l.b)(c.a,{common:!1,defaultValue:null,enumValues:{bool:'Coerces `"true"`/`/"false"`, `"1"`/`"0"`, and `"t"`/`"f"` values into boolean.',float:"Coerce to a 64 bit float.",int:"Coerce to a 64 bit integer.",string:"Coerce to a string.",timestamp:"Coerces to a Vector timestamp. [`strptime` specificiers][urls.strptime_specifiers] must be used to parse the string."},examples:[{status:"int"},{duration:"float"},{success:"bool"},{timestamp:"timestamp|%s"},{timestamp:"timestamp|%+"},{timestamp:"timestamp|%F"},{timestamp:"timestamp|%a %b %e %T %Y"}],name:"`[field-name]`",path:"types",relevantWhen:null,required:!1,templateable:!1,type:"string",unit:null,mdxType:"Field"},Object(l.b)("h4",{id:"field-name"},Object(l.b)("inlineCode",{parentName:"h4"},"[field-name]")),Object(l.b)("p",null,"A definition of log field type conversions. They key is the log field name and the value is the type. ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://docs.rs/chrono/0.3.1/chrono/format/strftime/index.html"}),Object(l.b)("inlineCode",{parentName:"a"},"strptime")," specifiers")," are supported for the ",Object(l.b)("inlineCode",{parentName:"p"},"timestamp")," type."))))),Object(l.b)("h2",{id:"output"},"Output"),Object(l.b)("p",null,"Given the following log line:"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "message": "5.86.210.12 - zieme4647 5667 [19/06/2019:17:20:49 -0400] \\"GET /embrace/supply-chains/dynamic/vertical\\" 201 20574"\n}\n')),Object(l.b)("p",null,"And the following configuration:"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-toml"}),'[transforms.<transform-id>]\n  type = "regex_parser"\n  field = "message"\n  regex = \'^(?P<host>[\\w\\.]+) - (?P<user>[\\w]+) (?P<bytes_in>[\\d]+) \\[(?P<timestamp>.*)\\] "(?P<method>[\\w]+) (?P<path>.*)" (?P<status>[\\d]+) (?P<bytes_out>[\\d]+)$\'\n\n[transforms.<transform-id>.types]\n  bytes_in = "int"\n  timestamp = "timestamp|%d/%m/%Y:%H:%M:%S %z"\n  status = "int"\n  bytes_out = "int"\n')),Object(l.b)("p",null,"A ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/about/data-model/log/"}),Object(l.b)("inlineCode",{parentName:"a"},"log")," event")," will be output with the following structure:"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'{\n  // ... existing fields\n  "bytes_in": 5667,\n  "host": "5.86.210.12",\n  "user_id": "zieme4647",\n  "timestamp": <19/06/2019:17:20:49 -0400>,\n  "message": "GET /embrace/supply-chains/dynamic/vertical",\n  "status": 201,\n  "bytes_out": 20574\n}\n')),Object(l.b)("p",null,"Things to note about the output:"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},"The ",Object(l.b)("inlineCode",{parentName:"li"},"message")," field was overwritten."),Object(l.b)("li",{parentName:"ol"},"The ",Object(l.b)("inlineCode",{parentName:"li"},"bytes_in"),", ",Object(l.b)("inlineCode",{parentName:"li"},"timestamp"),", ",Object(l.b)("inlineCode",{parentName:"li"},"status"),", and ",Object(l.b)("inlineCode",{parentName:"li"},"bytes_out")," fields were coerced.")),Object(l.b)("h2",{id:"how-it-works"},"How It Works"),Object(l.b)("h3",{id:"environment-variables"},"Environment Variables"),Object(l.b)("p",null,"Environment variables are supported through all of Vector's configuration.\nSimply add ",Object(l.b)("inlineCode",{parentName:"p"},"${MY_ENV_VAR}")," in your Vector configuration file and the variable\nwill be replaced before being evaluated."),Object(l.b)("p",null,"You can learn more in the ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/setup/configuration/#environment-variables"}),"Environment Variables"),"\nsection."),Object(l.b)("h3",{id:"failed-parsing"},"Failed Parsing"),Object(l.b)("p",null,"If the ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"#field"}),Object(l.b)("inlineCode",{parentName:"a"},"field"))," value fails to parse against the provided ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"#regex"}),Object(l.b)("inlineCode",{parentName:"a"},"regex"))," then an error\nwill be ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/administration/monitoring/#logs"}),"logged")," and the event will be kept or discarded\ndepending on the ",Object(l.b)("inlineCode",{parentName:"p"},"drop_failed")," value."),Object(l.b)("p",null,"A failure includes any event that does not successfully parse against the\nprovided ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"#regex"}),Object(l.b)("inlineCode",{parentName:"a"},"regex")),". This includes bad values as well as events missing the\nspecified ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"#field"}),Object(l.b)("inlineCode",{parentName:"a"},"field")),"."),Object(l.b)("h3",{id:"performance"},"Performance"),Object(l.b)("p",null,"The ",Object(l.b)("inlineCode",{parentName:"p"},"regex_parser")," source has been involved in the following performance tests:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/timberio/vector-test-harness/tree/master/cases/regex_parsing_performance"}),Object(l.b)("inlineCode",{parentName:"a"},"regex_parsing_performance")))),Object(l.b)("p",null,"Learn more in the ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"/#performance"}),"Performance")," sections."),Object(l.b)("h3",{id:"regex-debugger"},"Regex Debugger"),Object(l.b)("p",null,"To test the validity of the",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"#regex"}),Object(l.b)("inlineCode",{parentName:"a"},"regex"))," option, we recommend the ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://rustexp.lpil.uk/"}),"Rust\nRegex Tester"),". Note, you ",Object(l.b)("em",{parentName:"p"},"must")," use\n",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"#named-captures"}),"named captures")," in your regex to map the results to fields."),Object(l.b)("h3",{id:"regex-syntax"},"Regex Syntax"),Object(l.b)("p",null,"Vector follows the ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://docs.rs/regex/1.1.7/regex/#syntax"}),"documented Rust Regex syntax")," since\nVector is written in Rust. This syntax follows a Perl-style regular expression\nsyntax, but lacks a few features like look around and backreferences."),Object(l.b)("h4",{id:"named-captures"},"Named Captures"),Object(l.b)("p",null,"You can name Regex captures with the ",Object(l.b)("inlineCode",{parentName:"p"},"<name>")," syntax. For example:"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"^(?P<timestamp>\\w*) (?P<level>\\w*) (?P<message>.*)$\n")),Object(l.b)("p",null,"Will capture ",Object(l.b)("inlineCode",{parentName:"p"},"timestamp"),", ",Object(l.b)("inlineCode",{parentName:"p"},"level"),", and ",Object(l.b)("inlineCode",{parentName:"p"},"message"),". All values are extracted as\n",Object(l.b)("inlineCode",{parentName:"p"},"string")," values and must be coerced with the ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"#types"}),Object(l.b)("inlineCode",{parentName:"a"},"types"))," table."),Object(l.b)("p",null,"More info can be found in the ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://docs.rs/regex/1.1.7/regex/#grouping-and-flags"}),"Regex grouping and flags\ndocumentation"),"."),Object(l.b)("h4",{id:"flags"},"Flags"),Object(l.b)("p",null,"Regex flags can be toggled with the ",Object(l.b)("inlineCode",{parentName:"p"},"(?flags)")," syntax. The available flags are:"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Flag"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Descriuption"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(l.b)("inlineCode",{parentName:"td"},"i")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"case-insensitive: letters match both upper and lower case")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(l.b)("inlineCode",{parentName:"td"},"m")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"multi-line mode: ^ and $ match begin/end of line")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(l.b)("inlineCode",{parentName:"td"},"s")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"allow . to match ",Object(l.b)("inlineCode",{parentName:"td"},"\\n"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(l.b)("inlineCode",{parentName:"td"},"U")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"swap the meaning of ",Object(l.b)("inlineCode",{parentName:"td"},"x*")," and ",Object(l.b)("inlineCode",{parentName:"td"},"x*?"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(l.b)("inlineCode",{parentName:"td"},"u")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Unicode support (enabled by default)")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(l.b)("inlineCode",{parentName:"td"},"x")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"ignore whitespace and allow line comments (starting with ",Object(l.b)("inlineCode",{parentName:"td"},"#"),")")))),Object(l.b)("p",null,"For example, to enable the case-insensitive flag you can write:"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"(?i)Hello world\n")),Object(l.b)("p",null,"More info can be found in the ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://docs.rs/regex/1.1.7/regex/#grouping-and-flags"}),"Regex grouping and flags\ndocumentation"),"."))}u.isMDXComponent=!0},245:function(e,t,a){"use strict";var n=a(0),r=a.n(n);a(85);t.a=function({children:e,filters:t}){const[a,l]=Object(n.useState)(!1),[i,s]=Object(n.useState)(!1),[c,o]=Object(n.useState)(null);let b=Array.isArray(e)?e:[e],p=b.some(e=>e.props.common),m=b.some(e=>e.props.required),d=b;return a&&(d=d.filter(e=>e.props.common)),i&&(d=d.filter(e=>e.props.required)),c&&(d=d.filter(e=>e.props.name.toLowerCase().includes(c.toLowerCase()))),r.a.createElement("div",{className:"fields"},b.length>1&&!1!==t?r.a.createElement("div",{className:"filters"},r.a.createElement("span",{className:"result-count"},d.length," items"),r.a.createElement("div",{className:" search"},r.a.createElement("input",{type:"text",onChange:e=>o(e.currentTarget.value),placeholder:"\ud83d\udd0d Search..."})),r.a.createElement("div",{className:"checkboxes"},p&&r.a.createElement("label",{title:"Only show popular/common results"},r.a.createElement("input",{type:"checkbox",onChange:e=>l(e.currentTarget.checked),checked:a}),"common only"),m&&r.a.createElement("label",{title:"Only show required results"},r.a.createElement("input",{type:"checkbox",onChange:e=>s(e.currentTarget.checked),checked:i}),"required only"))):null,r.a.createElement("div",{className:"section-list"},!Array.isArray(d)||d.length>0?d:r.a.createElement("div",{className:"empty"},r.a.createElement("div",{className:"icon"},"\u2639"),r.a.createElement("div",null,"No fields found"))))}},246:function(e,t,a){"use strict";a(12);var n=a(0),r=a.n(n),l=a(241),i=a.n(l),s=(a(242),a(244)),c=a(251);function o(e){return JSON.stringify(e)}function b(e){return e.includes(".")?'"'+e+'"':e}function p(e,t){return(a=t)&&a.constructor===Object?"name"in t&&"value"in t?`${b(t.name)} = ${o(t.value)}`:`${b(Object.keys(t)[0])} = ${o(Object.values(t)[0])}`:e?`${e} = ${o(t)}`:`${o(t)}`;var a}function m({values:e}){let t=[];if(Array.isArray(e))for(var a in e){let n=e[a];t.push(r.a.createElement("code",{key:n},o(n))),t.push(" ")}else for(var n in e)t.push(r.a.createElement("code",{key:n,title:e[n]},o(n))),t.push(" ");return t}function d({name:e,path:t,value:a}){return r.a.createElement("code",null,p(null,a))}function u({name:e,path:t,values:a}){let n="";return a.forEach((function(t){n+=p(e,t)+"\n"})),t&&(n=`[${t}]\n${n}`),r.a.createElement("div",null,r.a.createElement(s.a,{fileName:"vector.toml"}),r.a.createElement(c.a,{className:"language-toml"},n))}function f({value:e}){let t=Object.keys(e)[0],a=Object.values(e)[0];return r.a.createElement("span",null,r.a.createElement("code",null,r.a.createElement("a",{href:`#${t}`},t))," = ",r.a.createElement("code",null,o(a)))}function g({defaultValue:e,enumValues:t,examples:a,name:l,path:i,relevantWhen:s}){const[c,o]=Object(n.useState)(!1);return e||t||a&&a.length>0?r.a.createElement("div",{className:"info"},void 0!==e?e?r.a.createElement("div",null,"Default: ",r.a.createElement(d,{name:l,path:i,value:e})):r.a.createElement("div",null,"No default"):null,t?r.a.createElement("div",null,"Enum, must be one of: ",r.a.createElement(m,{values:t})):null,s?r.a.createElement("div",null,"Only relevant when: ",r.a.createElement(f,{value:s})):null,r.a.createElement("div",null,r.a.createElement("div",{className:"show-more",onClick:()=>o(!c)},c?"Hide examples":"View examples"),c&&r.a.createElement("div",{className:"examples"},r.a.createElement(u,{name:l,path:i,values:a})))):null}t.a=function({children:e,common:t,defaultValue:a,enumValues:l,examples:s,name:c,path:o,relevantWhen:b,templateable:p,type:m,unit:d,required:u}){const[f,O]=Object(n.useState)(!1);let j=e;return f&&(j=j.filter(e=>"p"!=e.props.originalType)),r.a.createElement("div",{className:i()("field","section",u?"field-required":"",f?"field-collapsed":""),required:u},r.a.createElement("div",{className:"badges"},t&&r.a.createElement("span",{className:"badge badge--primary",title:"This is a popular that we recommend for getting started"},"common"),p&&r.a.createElement("span",{className:"badge badge--primary",title:"This option is dynamic and accepts the Vector template syntax"},"templateable"),r.a.createElement("span",{className:"badge badge--secondary"},m),l&&Object.keys(l).length>0&&r.a.createElement("span",{className:"badge badge--secondary",title:"This option is an enumation and only allows specific values"},"enum"),d&&r.a.createElement("span",{className:"badge badge--secondary"},d),u?r.a.createElement("span",{className:"badge badge--danger"},"required"):r.a.createElement("span",{className:"badge badge--secondary"},"optional")),j,!f&&r.a.createElement(g,{defaultValue:a,enumValues:l,examples:s,name:c,path:o,relevantWhen:b}))}}}]);